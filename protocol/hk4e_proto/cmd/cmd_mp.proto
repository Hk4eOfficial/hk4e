syntax = "proto3";

package proto;

import "define.proto";

option go_package = "./;proto";

message PlayerApplyEnterMpNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1826;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 src_thread_index = 5;
    uint32 src_app_id = 6;
    OnlinePlayerInfo src_player_info = 2;
}

message PlayerApplyEnterMpReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1818;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    uint32 target_uid = 4;
}

message PlayerApplyEnterMpRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1825;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    int32 retcode = 5;
    uint32 target_uid = 3;
    uint32 param = 4;
}

message PlayerApplyEnterMpResultNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1807;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    enum Reason {
        PLAYER_JUDGE = 0;
        SCENE_CANNOT_ENTER = 1;
        PLAYER_CANNOT_ENTER_MP = 2;
        SYSTEM_JUDGE = 3;
        ALLOW_ENTER_PLAYER_FULL = 4;
        WORLD_LEVEL_LOWER_THAN_HOST = 5;
        HOST_IN_MATCH = 6;
        PLAYER_IN_BLACKLIST = 7;
        PS_PLAYER_NOT_ACCEPT_OTHERS = 8;
        HOST_IS_BLOCKED = 9;
        OTHER_DATA_VERSION_NOT_LATEST = 10;
        DATA_VERSION_NOT_LATEST = 11;
        PLAYER_NOT_IN_PLAYER_WORLD = 12;
        MAX_PLAYER = 13;
    }

    bool is_agreed = 2;
    string target_nickname = 12;
    Reason reason = 13;
    uint32 target_uid = 1;
}

message PlayerApplyEnterMpResultReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1802;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    uint32 apply_uid = 2;
    bool is_agreed = 12;
}

message PlayerApplyEnterMpResultRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1831;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    int32 retcode = 1;
    bool is_agreed = 3;
    uint32 apply_uid = 10;
    uint32 param = 12;
}

message PlayerQuitFromMpNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1829;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    enum QuitReason {
        INVALID = 0;
        HOST_NO_OTHER_PLAYER = 1;
        KICK_BY_HOST = 2;
        BACK_TO_MY_WORLD = 3;
        KICK_BY_HOST_LOGOUT = 4;
        KICK_BY_HOST_BLOCK = 5;
        BE_BLOCKED = 6;
        KICK_BY_HOST_ENTER_HOME = 7;
        HOST_SCENE_INVALID = 8;
        KICK_BY_PLAY = 9;
        KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED = 10;
    }

    QuitReason reason = 11;
}

message PlayerPreEnterMpNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1822;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    enum State {
        INVALID = 0;
        START = 1;
        TIMEOUT = 2;
    }

    State state = 2;
    uint32 uid = 14;
    string nickname = 6;
}

message GetPlayerMpModeAvailabilityReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1844;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetPlayerMpModeAvailabilityRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1849;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    int32 mp_ret = 15;
    int32 retcode = 2;
    repeated uint32 param_list = 8;
}

message PlayerSetOnlyMPWithPSPlayerReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1820;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    bool is_only = 13;
}

message PlayerSetOnlyMPWithPSPlayerRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1845;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    int32 retcode = 5;
    bool is_only = 8;
}

message PSPlayerApplyEnterMpReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1841;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    string target_psn_id = 5;
}

message PSPlayerApplyEnterMpRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1842;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    string target_psn_id = 2;
    int32 retcode = 6;
    uint32 param = 10;
}

message MpPlayOwnerCheckReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1814;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    uint32 mp_play_id = 9;
    bool is_skip_match = 3;
}

message MpPlayOwnerCheckRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1847;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 wrong_uid = 4;
    bool is_skip_match = 15;
    uint32 mp_play_id = 10;
    int32 retcode = 12;
}

message MpPlayOwnerStartInviteReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1837;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    uint32 mp_play_id = 3;
    bool is_skip_match = 6;
}

message MpPlayOwnerStartInviteRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1823;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    int32 retcode = 14;
    uint32 mp_play_id = 3;
    bool is_skip_match = 9;
}

message MpPlayOwnerInviteNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1835;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 cd = 12;
    uint32 mp_play_id = 13;
    bool is_remain_reward = 10;
}

message MpPlayGuestReplyInviteReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1848;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    uint32 mp_play_id = 3;
    bool is_agree = 15;
}

message MpPlayGuestReplyInviteRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1850;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    int32 retcode = 4;
    uint32 mp_play_id = 10;
}

message MpPlayGuestReplyNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1812;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 uid = 7;
    bool is_agree = 4;
    uint32 mp_play_id = 14;
}

message MpPlayPrepareNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1833;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 mp_play_id = 9;
    uint32 prepare_end_time = 11;
}

message MpPlayInviteResultNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1815;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 mp_play_id = 11;
    bool all_argee = 10;
}

message MpPlayPrepareInterruptNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1813;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 mp_play_id = 12;
}

message MpBlockNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1801;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 end_time = 13;
}
