syntax = "proto3";

package proto;

import "cmd/cmd_fight.proto";
import "define.proto";

option go_package = "./;proto";

enum AbilityInvokeArgument {
    ABILITY_NONE = 0;
    ABILITY_META_MODIFIER_CHANGE = 1;
    ABILITY_META_COMMAND_MODIFIER_CHANGE_REQUEST = 2;
    ABILITY_META_SPECIAL_FLOAT_ARGUMENT = 3;
    ABILITY_META_OVERRIDE_PARAM = 4;
    ABILITY_META_CLEAR_OVERRIDE_PARAM = 5;
    ABILITY_META_REINIT_OVERRIDEMAP = 6;
    ABILITY_META_GLOBAL_FLOAT_VALUE = 7;
    ABILITY_META_CLEAR_GLOBAL_FLOAT_VALUE = 8;
    ABILITY_META_ABILITY_ELEMENT_STRENGTH = 9;
    ABILITY_META_ADD_OR_GET_ABILITY_AND_TRIGGER = 10;
    ABILITY_META_SET_KILLED_SETATE = 11;
    ABILITY_META_SET_ABILITY_TRIGGER = 12;
    ABILITY_META_ADD_NEW_ABILITY = 13;
    ABILITY_META_REMOVE_ABILITY = 14;
    ABILITY_META_SET_MODIFIER_APPLY_ENTITY = 15;
    ABILITY_META_MODIFIER_DURABILITY_CHANGE = 16;
    ABILITY_META_ELEMENT_REACTION_VISUAL = 17;
    ABILITY_META_SET_POSE_PARAMETER = 18;
    ABILITY_META_UPDATE_BASE_REACTION_DAMAGE = 19;
    ABILITY_META_TRIGGER_ELEMENT_REACTION = 20;
    ABILITY_META_LOSE_HP = 21;
    ABILITY_META_DURABILITY_IS_ZERO = 22;
    ABILITY_ACTION_TRIGGER_ABILITY = 50;
    ABILITY_ACTION_SET_CRASH_DAMAGE = 51;
    ABILITY_ACTION_EFFECT = 52;
    ABILITY_ACTION_SUMMON = 53;
    ABILITY_ACTION_BLINK = 54;
    ABILITY_ACTION_CREATE_GADGET = 55;
    ABILITY_ACTION_APPLY_LEVEL_MODIFIER = 56;
    ABILITY_ACTION_GENERATE_ELEM_BALL = 57;
    ABILITY_ACTION_SET_RANDOM_OVERRIDE_MAP_VALUE = 58;
    ABILITY_ACTION_SERVER_MONSTER_LOG = 59;
    ABILITY_ACTION_CREATE_TILE = 60;
    ABILITY_ACTION_DESTROY_TILE = 61;
    ABILITY_ACTION_FIRE_AFTER_IMAGE = 62;
    ABILITY_ACTION_DEDUCT_STAMINA = 63;
    ABILITY_ACTION_HIT_EFFECT = 64;
    ABILITY_ACTION_SET_BULLET_TRACK_TARGET = 65;
    ABILITY_MIXIN_AVATAR_STEER_BY_CAMERA = 100;
    ABILITY_MIXIN_MONSTER_DEFEND = 101;
    ABILITY_MIXIN_WIND_ZONE = 102;
    ABILITY_MIXIN_COST_STAMINA = 103;
    ABILITY_MIXIN_ELITE_SHIELD = 104;
    ABILITY_MIXIN_ELEMENT_SHIELD = 105;
    ABILITY_MIXIN_GLOBAL_SHIELD = 106;
    ABILITY_MIXIN_SHIELD_BAR = 107;
    ABILITY_MIXIN_WIND_SEED_SPAWNER = 108;
    ABILITY_MIXIN_DO_ACTION_BY_ELEMENT_REACTION = 109;
    ABILITY_MIXIN_FIELD_ENTITY_COUNT_CHANGE = 110;
    ABILITY_MIXIN_SCENE_PROP_SYNC = 111;
    ABILITY_MIXIN_WIDGET_MP_SUPPORT = 112;
    ABILITY_MIXIN_DO_ACTION_BY_SELF_MODIFIER_ELEMENT_DURABILITY_RATIO = 113;
    ABILITY_MIXIN_FIREWORKS_LAUNCHER = 114;
    ABILITY_MIXIN_ATTACK_RESULT_CREATE_COUNT = 115;
    ABILITY_MIXIN_UGC_TIME_CONTROL = 116;
    ABILITY_MIXIN_AVATAR_COMBAT = 117;
    ABILITY_MIXIN_DEATH_ZONE_REGIONAL_PLAY_MIXIN = 118;
    ABILITY_MIXIN_UI_INTERACT = 119;
    ABILITY_MIXIN_SHOOT_FROM_CAMERA = 120;
    ABILITY_MIXIN_ERASE_BRICK_ACTIVITY = 121;
    ABILITY_MIXIN_BREAKOUT = 122;
}

enum ModifierAction {
    ADDED = 0;
    REMOVED = 1;
}

message AbilityInvokeEntryHead {
    int32 modifier_config_local_id = 7;
    bool is_serverbuff_modifier = 2;
    uint32 instanced_ability_id = 1;
    uint32 instanced_modifier_id = 12;
    int32 local_id = 10;
    uint32 server_buff_uid = 14;
    uint32 target_id = 3;
}

message AbilityInvokeEntry {
    bytes ability_data = 15;
    AbilityInvokeEntryHead head = 2;
    uint32 event_id = 12;
    uint32 entity_id = 9;
    double total_tick_time = 14;
    uint32 forward_peer = 4;
    AbilityInvokeArgument argument_type = 1;
    bool is_ignore_auth = 8;
    ForwardType forward_type = 3;
}

message AbilityInvocationFixedNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1172;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    AbilityInvokeEntry invoke6th = 14;
    AbilityInvokeEntry invoke5th = 8;
    AbilityInvokeEntry invoke4th = 1;
    AbilityInvokeEntry invoke2nd = 5;
    AbilityInvokeEntry invoke1st = 10;
    AbilityInvokeEntry invoke3rd = 12;
}

message AbilityInvocationsNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1198;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    repeated AbilityInvokeEntry invokes = 2;
}

message AbilityMetaReInitOverrideMap {
    repeated AbilityScalarValueEntry override_map = 7;
}

message AbilityMetaAddAbility {
    AbilityAppliedAbility ability = 12;
}

message ModifierProperty {
    AbilityString key = 15;
    float value = 5;
}

message AbilityMetaModifierChange {
    AbilityAttachedModifier attached_instanced_modifier = 7;
    uint32 server_buff_uid = 4;
    bool is_attached_parent_ability = 10;
    ModifierAction action = 13;
    int32 modifier_local_id = 2;
    AbilityString parent_ability_name = 1;
    bool is_mute_remote = 6;
    uint32 apply_entity_id = 5;
    repeated ModifierProperty properties = 3;
    AbilityString parent_ability_override = 11;
    bool is_durability_zero = 9;
}

message AbilityMetaDurabilityIsZero {
    bool is_zero = 5;
}

message AbilityMetaSpecialFloatArgument {
    float argument_value = 14;
    bool is_on = 10;
}

message AbilityMetaAddOrGetAbilityAndTrigger {
    AbilityString ability_name = 13;
    float trigger_argument = 3;
    AbilityString ability_override = 8;
}

message AbilityMetaSetKilledState {
    bool killed = 2;
}

message AbilityMetaSetAbilityTrigger {
    uint32 trigger_ability_entity_id = 11;
}

message AbilityMetaSetModifierApplyEntityId {
    uint32 apply_entity_id = 10;
}

message AbilityMetaModifierDurabilityChange {
    float reduce_durability = 6;
    float remain_durability = 15;
}

message AbilityMetaElementReactionVisual {
    int32 hit_index = 2;
    uint32 element_source_type = 12;
    uint32 element_reactor_type = 6;
    uint32 element_reaction_type = 5;
}

message AbilityMetaTriggerElementReaction {
    int32 hit_index = 9;
    uint32 element_source_type = 7;
    uint32 element_reactor_type = 12;
    uint32 trigger_entity_id = 2;
    uint32 element_reaction_type = 1;
}

message AbilityMetaLoseHp {
    uint32 lose_hp_config_idx = 10;
}

message AbilityMetaSetPoseParameter {
    AnimatorParameterValueInfoPair value = 6;
}

message AbilityMetaUpdateBaseReactionDamage {
    uint32 source_caster_id = 15;
    AbilityString ability_name = 1;
    AbilityString global_value_key = 4;
    uint32 reaction_type = 8;
}

message AbilityActionTriggerAbility {
    uint32 other_id = 14;
}

message AbilityActionSetCrashDamage {
    Vector hit_pos = 2;
    float damage = 15;
}

message AbilityBornType {
    Vector rot = 2;
    Vector move_dir = 14;
    Vector pos = 5;
}

message AbilityFireworkBornType {
    uint32 effect_index = 13;
    Vector pos = 10;
    Vector move_dir = 1;
    Vector rot = 5;
}

message AbilityActionSummon {
    Vector pos = 10;
    Vector rot = 1;
}

message AbilityActionBlink {
    Vector rot = 11;
    Vector pos = 10;
}

message AbilityActionCreateGadget {
    uint32 room_id = 3;
    Vector rot = 8;
    Vector pos = 11;
}

message AbilityActionSetRandomOverrideMapValue {
    float random_value = 1;
}

message AbilityActionServerMonsterLog {
    repeated int32 param_list = 2;
}

message AbilityActionCreateTile {
    Vector rot = 3;
    Vector pos = 8;
}

message AbilityActionDestroyTile {
    Vector rot = 3;
    Vector pos = 1;
}

message AbilityActionFireAfterImgae {
    Vector dir = 12;
}

message AbilityApplyLevelModifier {
    uint32 apply_entity_id = 6;
}

message AbilityActionGenerateElemBall {
    uint32 room_id = 2;
    Vector pos = 7;
    Vector rot = 13;
}

message AbilityActionDeductStamina {
    bool is_swim = 1;
}

message AbilityActionHitEffect {
    uint32 trigger_id = 3;
}

message AbilityActionSetBulletTrackTarget {
    uint32 chased_entity_id = 1;
    uint32 lock_point_index = 2;
}

message AbilityMixinEmpty {
}

message AbilityMixinAvatarSteerByCamera {
    Vector target_dir = 7;
    Vector target_pos = 6;
}

message AbilityMixinWindZone {
    repeated uint32 entity_ids = 13;
    repeated uint32 zone_id_list = 10;
}

message AbilityMixinCostStamina {
    bool is_swim = 3;
}

message AbilityMixinEliteShield {
    float sub_shield = 2;
}

message AbilityMixinElementShield {
    float sub_shield = 10;
    float shield = 8;
    uint32 absorb_type = 1;
    uint32 player_num = 4;
    bool is_shield_broken = 9;
    float max_shield = 12;
}

message AbilityMixinGlobalShield {
    bool is_create_effect = 4;
    float sub_shield = 7;
    float height_offset = 5;
    uint32 avatar_id = 11;
    float max_shield = 10;
    string shield_effect_name = 2;
}

message AbilityMixinShieldBar {
    uint32 player_num = 14;
    float max_shield = 15;
    float shield = 12;
    uint32 element_type = 13;
}

message AbilityMixinWindSeedSpawner {
    message AddSignal {
    }

    message RefreshSeed {
        repeated Vector pos_list = 6;
    }

    message CatchSeed {
        uint32 entity_id = 8;
    }

    oneof cmd {
        AddSignal add_signal = 2;
        RefreshSeed refresh_seed = 15;
        CatchSeed catch_seed = 11;
    }
}

message AbilityMixinDoActionByElementReaction {
    uint32 target_entity_id = 1;
}

message AbilityMixinFieldEntityCountChange {
    uint32 field_entity_count = 14;
}

message AbilityMixinScenePropSync {
    repeated int64 delete_id_list = 5;
    bool is_clear_all = 12;
    repeated MassivePropSyncInfo massive_prop_list = 15;
}

message AbilityMixinWidgetMpSupport {
    uint32 target_entity_id = 9;
}

message AbilityMixinDoActionBySelfModifierElementDurabilityRatio {
    float last_duability_ratio = 9;
}

message AbilityMixinFireworksLauncher {
    uint32 invoke_type = 2;
    uint32 start_count_down_time = 3;
    uint32 fired_bullet_count = 1;
    uint32 phase = 6;
    repeated uint32 fireworks_config = 4;
    uint32 turn_index = 7;
}

message AbilityMixinUGCTimeControl {
    uint64 start_move_time_ms = 13;
    uint32 start_move_time = 3;
}

message AbilityMixinUIInteract {
}

message AbilityMixinAvatarCombat {
    bool is_enter_combat = 9;
}

message AbilityMixinShootFromCamera {
    Vector init_pos = 13;
    Vector forward = 2;
}

message AbilityMixinEraseBrickActivity {
    repeated uint32 data = 6;
}

message BreakoutSyncCreateConnect {
    repeated BreakoutSyncConnectUidInfo uid_info_list = 1;
}

message BreakoutSyncPing {
    uint64 client_game_time = 2;
    uint64 server_game_time = 11;
}

message BreakoutSyncFinishGame {
    bool is_win = 13;
    bool is_stop_gallery = 15;
    uint64 server_game_time = 9;
}

message BreakoutSyncSnapShot {
    BreakoutSnapShot snap_shot = 9;
}

message BreakoutSyncAction {
    BreakoutAction action = 1;
}

message AbilityMixinBreakout {
    enum SyncType {
        SYNC_TYPE_NONE = 0;
        SYNC_TYPE_CREATE_CONNECT = 1;
        SYNC_TYPE_START_GAME = 2;
        SYNC_TYPE_PING = 3;
        SYNC_TYPE_FINISH_GAME = 4;
        SYNC_TYPE_SNAP_SHOT = 5;
        SYNC_TYPE_ACTION = 6;
    }

    SyncType sync_type = 8;
    int32 retcode = 2;
    oneof sync {
        BreakoutSyncCreateConnect sync_create_connect = 4;
        BreakoutSyncPing sync_ping = 7;
        BreakoutSyncFinishGame sync_finish_game = 6;
        BreakoutSyncSnapShot sync_snap_shot = 12;
        BreakoutSyncAction sync_action = 9;
    }
}

message AttackResultCreateCount {
    repeated uint32 create_count_list = 10;
    repeated uint32 create_count_no_cost_list = 7;
}

message ClientAbilityInitBeginNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1112;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    uint32 entity_id = 1;
}

message ClientAbilityInitFinishNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1135;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    repeated AbilityInvokeEntry invokes = 14;
    uint32 entity_id = 11;
}

message AbilityInvocationFailNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1107;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    string reason = 7;
    uint32 entity_id = 13;
    AbilityInvokeEntry invoke = 3;
}

message EntityAbilityInvokeEntry {
    uint32 entity_id = 8;
    repeated AbilityInvokeEntry invokes = 1;
}

message ClientAbilitiesInitFinishCombineNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1103;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    repeated EntityAbilityInvokeEntry entity_invoke_list = 1;
}

message WindSeedClientNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1199;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    message RefreshNotify {
        uint32 refresh_num = 9;
    }

    message AddWindBulletNotify {
        Vector seed_pos = 6;
        uint32 catch_player_uid = 8;
        uint32 seed_entity_id = 7;
    }

    message AreaNotify {
        bytes area_code = 5;
        uint32 area_id = 10;
        uint32 area_type = 7;
    }

    oneof notify {
        RefreshNotify refresh_notify = 14;
        AddWindBulletNotify add_wind_bullet_notify = 6;
        AreaNotify area_notify = 4;
    }
}

message AbilityChangeNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1131;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 entity_id = 1;
    AbilityControlBlock ability_control_block = 15;
}

message ClientAbilityChangeNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1175;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    bool is_init_hash = 9;
    uint32 entity_id = 2;
    repeated AbilityInvokeEntry invokes = 3;
}

message ServerUpdateGlobalValueNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1148;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    enum UpdateType {
        INVALUE = 0;
        ADD = 1;
        SET = 2;
    }

    uint32 entity_id = 9;
    UpdateType update_type = 13;
    float delta = 3;
    uint32 key_hash = 10;
    float value = 6;
}

message ServerGlobalValueChangeNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1197;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 entity_id = 6;
    float value = 12;
    uint32 key_hash = 13;
}

message ClientAIStateNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1181;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    uint32 entity_id = 9;
    uint32 cur_tactic = 15;
}

message ServerCombatEndNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1105;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    repeated uint32 combat_end_type_list = 14;
}

message ClientRemoveCombatEndModifierNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1182;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    repeated uint32 combat_end_type_list = 7;
}

message PerformOperationNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1147;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    enum OperateType {
        OPERATE_TYPE_NONE = 0;
        OPERATE_TYPE_EFFECT = 1;
    }

    uint32 index = 9;
    Vector pos = 7;
    Vector rot = 10;
    OperateType operate_type = 3;
    uint32 entity_id = 13;
}
