syntax = "proto3";

package proto;

import "define.proto";

option go_package = "./;proto";

message PlayerStartMatchReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4176;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    MatchType match_type = 3;
    uint32 mechanicus_difficult_level = 12;
    repeated uint32 match_param_list = 11;
    uint32 dungeon_id = 1;
    uint32 mp_play_id = 15;
    uint32 match_id = 6;
}

message PlayerStartMatchRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4168;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    int32 retcode = 1;
    uint32 punish_end_time = 5;
    uint32 param = 4;
    uint32 mp_play_id = 13;
    uint32 mechanicus_difficult_level = 2;
    uint32 dungeon_id = 3;
    uint32 match_id = 8;
    MatchType match_type = 7;
}

message PlayerMatchInfoNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4175;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 match_id = 8;
    uint32 match_begin_time = 4;
    uint32 dungeon_id = 10;
    MatchType match_type = 11;
    uint32 mechanicus_difficult_level = 12;
    repeated uint32 match_param_list = 6;
    uint32 estimate_match_cost_time = 3;
    uint32 mp_play_id = 5;
    uint32 host_uid = 13;
}

message PlayerCancelMatchReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4157;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    MatchType match_type = 11;
}

message PlayerCancelMatchRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4152;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    int32 retcode = 6;
    MatchType match_type = 7;
}

message PlayerMatchStopNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4181;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    MatchReason reason = 1;
    uint32 host_uid = 12;
}

message MatchPlayerInfo {
    bool is_agreed = 9;
    OnlinePlayerInfo player_info = 2;
}

message GeneralMatchInfo {
    uint32 match_param = 1;
    uint32 match_id = 9;
    repeated MatchPlayerInfo player_list = 5;
}

message GCGMatchInfo {
    repeated MatchPlayerInfo player_list = 13;
}

message PlayerMatchSuccNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4179;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    GeneralMatchInfo general_match_info = 7;
    uint32 mp_play_id = 15;
    uint32 host_uid = 3;
    MatchType match_type = 5;
    GCGMatchInfo gcg_match_info = 11;
    uint32 confirm_end_time = 2;
    uint32 dungeon_id = 6;
    uint32 mechanicus_difficult_level = 1;
}

message PlayerConfirmMatchReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4172;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }

    MatchType match_type = 12;
    bool is_agreed = 10;
}

message PlayerConfirmMatchRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4194;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    MatchType match_type = 9;
    uint32 match_id = 4;
    bool is_agreed = 11;
    int32 retcode = 10;
}

message PlayerAllowEnterMpAfterAgreeMatchNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4199;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 target_uid = 1;
}

message PlayerMatchAgreedResultNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4170;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    enum Reason {
        SUCC = 0;
        TARGET_SCENE_CANNOT_ENTER = 1;
        SELF_MP_UNAVAILABLE = 2;
        OTHER_DATA_VERSION_NOT_LATEST = 3;
        DATA_VERSION_NOT_LATEST = 4;
    }

    uint32 target_uid = 14;
    MatchType match_type = 3;
    Reason reason = 8;
}

message PlayerApplyEnterMpAfterMatchAgreedNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4195;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    OnlinePlayerInfo src_player_info = 11;
    uint32 matchserver_id = 10;
    MatchType match_type = 3;
}

message PlayerGeneralMatchDismissNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4191;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    repeated uint32 uid_list = 3;
    MatchReason reason = 13;
    uint32 match_id = 1;
}

message PlayerGeneralMatchConfirmNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4192;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 match_id = 8;
    bool is_agree = 13;
    uint32 uid = 14;
}

message PlayerGetForceQuitBanInfoReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4164;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerGetForceQuitBanInfoRsp {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4197;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    int32 retcode = 4;
    uint32 match_id = 8;
    uint32 expire_time = 13;
}

message ServerTryCancelGeneralMatchNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4187;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 match_id = 9;
}

message PlayerGCGMatchDismissNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4173;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 match_id = 11;
    MatchReason reason = 5;
    repeated uint32 uid_list = 7;
}

message PlayerGCGMatchConfirmNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4185;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }

    uint32 uid = 10;
    bool is_agree = 5;
    uint32 match_id = 14;
}
