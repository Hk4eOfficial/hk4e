syntax = "proto3";

package proto_log;

enum ChangeSceneTeamReason {
    CHANGE_SCENE_TEAM_REASON_NONE = 0;
    CHANGE_SCENE_TEAM_REASON_ENTER_SCENE = 1;
    CHANGE_SCENE_TEAM_REASON_SET_UP_AVATAR_TEAM = 2;
    CHANGE_SCENE_TEAM_REASON_CHOOSE_CUR_TEAM = 3;
    CHANGE_SCENE_TEAM_REASON_SCENE_SPECIFIC = 4;
    CHANGE_SCENE_TEAM_REASON_MP_CHANGE = 5;
    CHANGE_SCENE_TEAM_REASON_TEMP_TEAM_CHANGE = 6;
    CHANGE_SCENE_TEAM_REASON_MP_PLAYER_LEAVE = 7;
    CHANGE_SCENE_TEAM_REASON_ENTER_SINGLE_DUNGEON = 8;
    CHANGE_SCENE_TEAM_REASON_ENTER_MULTIPLE_DUNGEON = 9;
    CHANGE_SCENE_TEAM_REASON_GM = 10;
    CHANGE_SCENE_TEAM_REASON_QUEST = 11;
    CHANGE_SCENE_TEAM_REASON_TOWER = 12;
    CHANGE_SCENE_TEAM_REASON_DEL_AVATAR = 13;
    CHANGE_SCENE_TEAM_REASON_USE_ITEM_REVIVE = 14;
    CHANGE_SCENE_TEAM_REASON_SUMO_ACTIVITY_SWITCH_TEAM = 15;
    CHANGE_SCENE_TEAM_REASON_FISHING = 16;
    CHANGE_SCENE_TEAM_REASON_ROGUELIKE_SWITCH = 17;
    CHANGE_SCENE_TEAM_REASON_IRODORI_MASTER = 18;
    CHANGE_SCENE_TEAM_REASON_ROGUE_DIARY = 19;
    CHANGE_SCENE_TEAM_REASON_PERSISTENT_DUNGEON = 20;
    CHANGE_SCENE_TEAM_REASON_VINTAGE_HUNTING = 21;
    CHANGE_SCENE_TEAM_REASON_BRICK_BREAKER = 22;
}

enum MotionType {
    MOTION_TYPE_NONE = 0;
    MOTION_TYPE_CLIMB = 1;
    MOTION_TYPE_SWIM = 2;
    MOTION_TYPE_FLY = 3;
}

enum PlayerLogMissionType {
    PLAYER_LOG_MISSION_NONE = 0;
    PLAYER_LOG_MISSION_MAIN_QUEST = 1;
    PLAYER_LOG_MISSION_QUEST = 2;
    PLAYER_LOG_MISSION_RANDOM_QUEST = 3;
}

enum PlayerLogMissionRemoveType {
    PLAYER_LOG_MISSION_REMOVE_NONE = 0;
    PLAYER_LOG_MISSION_REMOVE_FINISH_PARENT = 1;
    PLAYER_LOG_MISSION_REMOVE_ROLLBACK = 2;
    PLAYER_LOG_MISSION_REMOVE_GM = 3;
    PLAYER_LOG_MISSION_REMOVE_RESET_PARENT = 4;
    PLAYER_LOG_MISSION_REMOVE_NPC_CONFLICT = 5;
    PLAYER_LOG_MISSION_REMOVE_FAIL_PARENT = 6;
    PLAYER_LOG_MISSION_REMOVE_CANCEL_PARENT = 7;
    PLAYER_LOG_MISSION_REMOVE_FINISH_COOP_POINT = 8;
}

enum AvatarDeathRevivalType {
    AVATAR_DEATH_REVIVAL_NONE = 0;
    PLAYER_DIE_KILL_BY_MONSTER = 1;
    PLAYER_DIE_KILL_BY_GEAR = 2;
    PLAYER_DIE_FALL = 3;
    PLAYER_DIE_DRAWN = 4;
    PLAYER_DIE_ABYSS = 5;
    PLAYER_DIE_GM = 6;
    REVIVAL_PENALTY = 101;
    REVIVAL_ALL_DIE = 102;
    REVIVAL_ITEM = 103;
    REVIVAL_CAN_REVIVE = 104;
    REVIVAL_REPLACE_REBORN = 105;
    REVIVAL_REFRESH = 106;
    REVIVAL_TRANS_POINT = 107;
    REVIVAL_SETUP_TRIAL = 108;
    REVIVAL_TO_SCENE = 109;
    REVIVAL_GM = 110;
    REVIVAL_ROGUELIKE_DUNGEON = 111;
    REVIVAL_ROGUE_DIARY_REPAIR = 112;
    REVIVAL_ROGUE_DIARY_LOAD = 113;
    REVIVAL_QUEST_EXEC = 114;
    REVIVAL_ALL_DIE_ENTER_DUNGEON = 115;
}

enum TransType {
    TRANS_NONE = 0;
    TRANS_CHALLENGE = 1;
    TRANS_COMBAT = 2;
}

enum TargetType {
    TARGET_NONE = 0;
    TARGET_AVATAR = 1;
    TARGET_MONSTER = 2;
    TARGET_GADGET = 3;
}

enum DungeonQuitReason {
    DUNGEON_QUIT_NONE = 0;
    DUNGEON_QUIT_REASON_TRANSFER = 1;
    DUNGEON_QUIT_REASON_SUCC_POINT = 2;
    DUNGEON_QUIT_REASON_SUCC_TRANSFER = 3;
    DUNGEON_QUIT_REASON_SUCC_TIMEOUT = 4;
    DUNGEON_QUIT_REASON_LOGOUT = 5;
    DUNGEON_QUIT_REASON_DIE_OPTION = 6;
    DUNGEON_QUIT_REASON_GM = 7;
    DUNGEON_QUIT_REASON_TIMEOUT = 8;
    DUNGEON_QUIT_REASON_ALL_DIED = 9;
    DUNGEON_QUIT_REASON_CLIENT_TRANSMIT = 10;
    DUNGEON_QUIT_REASON_PLAYER_EXIT = 11;
    DUNGEON_QUIT_REASON_PLAYER_EXIT_SUCC = 12;
    DUNGEON_QUIT_REASON_PLAYER_EXIT_FAIL = 13;
    DUNGEON_QUIT_REASON_MUIP = 14;
}

enum AddAvatarReason {
    ADD_AVATAR_REASON_NONE = 0;
    ADD_AVATAR_REASON_BORN = 1;
    ADD_AVATAR_REASON_TRIAL = 2;
    ADD_AVATAR_REASON_GM = 3;
    ADD_AVATAR_REASON_ITEM = 4;
}

enum PlayerWearEquipOpType {
    PLAYER_WEAR_EQUIP_OP_NONE = 0;
    PLAYER_WEAR_EQUIP_OP_WEAR = 1;
    PLAYER_WEAR_EQUIP_OP_UNLOAD = 2;
    PLAYER_WEAR_EQUIP_OP_CHANGE = 3;
}

enum PlayerTeamOpType {
    PLAYER_TEAM_OP_NONE = 0;
    PLAYER_TEAM_OP_ENTER = 1;
    PLAYER_TEAM_OP_EXIT = 2;
    PLAYER_TEAM_OP_KICK = 3;
    PLAYER_TEAM_OP_SYSTEM_KICK = 4;
}

enum WorldLevelChangeReason {
    WORLD_LEVEL_CHANGE_REASON_NONE = 0;
    WORLD_LEVEL_CHANGE_REASON_SYSTEM = 1;
    WORLD_LEVEL_CHANGE_REASON_MANUAL = 2;
    WORLD_LEVEL_CHANGE_REASON_GM = 3;
    WORLD_LEVEL_CHANGE_REASON_MUIP = 4;
    WORLD_LEVEL_CHANGE_REASON_FEATURE = 5;
}

enum GachaWishProgressReason {
    GACHA_WISH_PROGRESS_NONE = 0;
    GACHA_WISH_PROGRESS_WISH = 1;
    GACHA_WISH_PROGRESS_WISH_CANCEL = 2;
    GACHA_WISH_PROGRESS_SCHEDULE = 3;
    GACHA_WISH_PROGRESS_GACHA = 4;
    GACHA_WISH_PROGRESS_GM = 5;
}

enum ExpeditionFinishReason {
    EXPDITION_FINISH_REASON_NONE = 0;
    EXPDITION_FINISH_REASON_INTERRUPT = 1;
    EXPDITION_FINISH_REASON_NORMAL = 2;
}

enum UserTextType {
    USER_TEXT_INVALID = 0;
    USER_TEXT_NICKNAME = 1;
    USER_TEXT_TEAMNAME = 2;
    USER_TEXT_MARKNAME = 3;
    USER_TEXT_MP_CHAT = 4;
    USER_TEXT_SEA_LAMP_FLY_LAMP = 5;
    USER_TEXT_SIGNATURE = 6;
    USER_TEXT_REPORT = 7;
    USER_TEXT_REMARK_NAME = 8;
    USER_TEXT_PRIVATE_CHAT = 15;
    USER_TEXT_GCG_DECK_NAME = 16;
    USER_TEXT_HOME_BLUEPRINT_SHARE_CODE = 17;
    USER_TEXT_AVATAR_RENAME = 18;
}

enum SuiteChangeReason {
    SUITE_CHANGE_REASON_NONE = 0;
    SUITE_CHANGE_REASON_INIT = 1;
    SUITE_CHANGE_REASON_REFRESH = 2;
    SUITE_CHANGE_REASON_LUA_REFRESH_GROUP = 3;
    SUITE_CHANGE_REASON_LUA_GO_TO_SUITE = 4;
    SUITE_CHANGE_REASON_LUA_GO_BACK_SUITE = 5;
    SUITE_CHANGE_REASON_MUIP = 6;
    SUITE_CHANGE_REASON_QUEST_ACTION = 7;
    SUITE_CHANGE_REASON_ACTIVITY_ACTION = 8;
    SUITE_CHANGE_REASON_SALESMAN = 9;
    SUITE_CHANGE_REASON_TREASURE_MAP = 10;
    SUITE_CHANGE_REASON_GM = 11;
    SUITE_CHANGE_REASON_WIDGET = 12;
    SUITE_CHANGE_REASON_WORLD_QUEST_FLOW_ACTION = 13;
}

enum HomeAddExpReasonType {
    HOME_ADD_EXP_REASON_NONE = 0;
    HOME_ADD_EXP_REASON_TAKE_FURNITURE_MAKE = 1;
    HOME_ADD_EXP_REASON_GM = 2;
}

enum FishpondType {
    FISHPOND_TYPE_NONE = 0;
    FISHPOND_TYPE_HOME_WORLD = 1;
    FISHPOND_TYPE_HOME_ROOM = 2;
    FISHPOND_TYPE_SCENE_POINT = 3;
}

enum PlaySource {
    PLAY_SOURCE_NONE = 0;
    PLAY_SOURCE_DRAFT = 1;
    PLAY_SOURCE_MATCH = 2;
}

enum HideAndSeekIdentity {
    HIDE_AND_SEEK_IDENTITY_NONE = 0;
    HIDE_AND_SEEK_IDENTITY_HUNTER = 1;
    HIDE_AND_SEEK_IDENTITY_HIDER = 2;
}

enum BuoyantCombatStopReason {
    PLAYER_LOG_BUOYANTCOMBAT_STOP_REASON_NONE = 0;
    PLAYER_LOG_BUOYANTCOMBAT_STOP_REASON_TEAMDEAD = 1;
    PLAYER_LOG_BUOYANTCOMBAT_STOP_REASON_TIMEOUT = 2;
    PLAYER_LOG_BUOYANTCOMBAT_STOP_REASON_OTHER = 3;
}

enum StaminaChangeType {
    STAMINA_CHANGE_TYPE_NONE = 0;
    STAMINA_CHANGE_TYPE_SET_MOTION_STATE = 1;
    STAMINA_CHANGE_TYPE_ON_SCENE_AVATAR_STAMINA_STEP_REQ = 2;
    STAMINA_CHANGE_TYPE_PROC_IN_TIMER = 3;
    STAMINA_CHANGE_TYPE_PROC_DASH_IN_TIMER = 4;
    STAMINA_CHANGE_TYPE_ON_SKILL_START = 5;
    STAMINA_CHANGE_TYPE_COST_STAMINA_MIXIN = 6;
    STAMINA_CHANGE_TYPE_USE_ITEM = 7;
    STAMINA_CHANGE_TYPE_INIT_ENTER_SCENE_AVATAR = 8;
    STAMINA_CHANGE_TYPE_ABILITY_ACTION = 9;
}

enum GalleryHomeRacingStopReason {
    GALLERY_HOME_RACING_STOP_REASON_NONE = 0;
    GALLERY_HOME_RACING_STOP_REASON_FINISH = 1;
    GALLERY_HOME_RACING_STOP_REASON_INTERRUPT = 2;
    GALLERY_HOME_RACING_STOP_REASON_OTHER = 3;
}

enum GalleryHomeStopReason {
    GALLERY_HOME_STOP_REASON_NONE = 0;
    GALLERY_HOME_STOP_REASON_FINISH = 1;
    GALLERY_HOME_STOP_REASON_INTERRUPT = 2;
    GALLERY_HOME_STOP_REASON_OTHER = 3;
}

enum BartenderFormulaUnlockType {
    BARTENDER_FORMULA_UNLOCK_DEFAULT = 0;
    BARTENDER_FORMULA_UNLOCK_TASK = 1;
    BARTENDER_FORMULA_UNLOCK_LEVEL = 2;
    BARTENDER_FORMULA_UNLOCK_DEVELOP = 3;
    BARTENDER_FORMULA_UNLOCK_QUEST = 4;
}

enum PlayCustomDungeonType {
    PLAY_CUSTOM_DUNGEON_NONE = 0;
    PLAY_CUSTOM_DUNGEON_OFFICIAL = 1;
    PLAY_CUSTOM_DUNGEON_SELF = 2;
    PLAY_CUSTOM_DUNGEON_RECOMMEND = 3;
    PLAY_CUSTOM_DUNGEON_OTHERS = 4;
}

enum GalleryPhotoStopReason {
    GALLERY_PHOTO_STOP_REASON_NONE = 0;
    GALLERY_PHOTO_STOP_REASON_SUCC = 1;
    GALLERY_PHOTO_STOP_REASON_LEAVE = 2;
    GALLERY_PHOTO_STOP_REASON_FULL = 3;
}

enum IrodoriMasterSettleResult {
    IRODORI_MASTER_SETTLE_NONE = 0;
    IRODORI_MASTER_SETTLE_SUCC = 1;
    IRODORI_MASTER_SETTLE_INTERRUPT = 2;
    IRODORI_MASTER_SETTLE_DEATH = 3;
    IRODORI_MASTER_SETTLE_TIMEOUT = 4;
}

enum LuminanceGalleryStopReason {
    PLAYER_LOG_LUMINANCE_STONE_STOP_REASON_NONE = 0;
    PLAYER_LOG_LUMINANCE_STONE_STOP_REASON_TIMEOUT = 1;
    PLAYER_LOG_LUMINANCE_STONE_STOP_REASON_ALL_AVATAR_DIE = 2;
    PLAYER_LOG_LUMINANCE_STONE_STOP_REASON_OWNER_LEAVE = 3;
    PLAYER_LOG_LUMINANCE_STONE_STOP_REASON_CLIENT_INTERRUPT = 4;
    PLAYER_LOG_LUMINANCE_STONE_STOP_REASON_FAIL = 5;
}

enum PlayerLogMusicGameType {
    PLAYER_LOG_MUSIC_GAME_TYPE_NONE = 0;
    PLAYER_LOG_MUSIC_GAME_TYPE_NORMAL = 1;
    PLAYER_LOG_MUSIC_GAME_TYPE_UGC = 2;
    PLAYER_LOG_MUSIC_GAME_TYPE_UGC_TRY = 3;
}

enum RogueDiaryRoomResult {
    ROGUE_DIARY_RESULT_SUCC = 0;
    ROGUE_DIARY_RESULT_TEAM_DEATH = 1;
    ROGUE_DIARY_RESULT_TIMEOUT = 2;
    ROGUE_DIARY_RESULT_INTERRUPT = 3;
}

enum RogueDiaryCoinChangeReason {
    ROGUE_DIARY_COIN_FIGHT_ADD = 0;
    ROGUE_DIARY_COIN_REFRESH = 1;
    ROGUE_DIARY_COIN_BUY_CARD = 2;
    ROGUE_DIARY_COIN_BUYBACK = 3;
    ROGUE_DIARY_COIN_RETURN = 4;
}

enum ChangeAvatarExtraPropReason {
    CHANGE_AVATAR_EXTRA_PROP_REASON_NONE = 0;
    CHANGE_AVATAR_EXTRA_PROP_REASON_ITEM = 1;
    CHANGE_AVATAR_EXTRA_PROP_REASON_GM = 2;
    CHANGE_AVATAR_EXTRA_PROP_REASON_MUIP = 3;
}

message PositionLog {
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;
}

message PlayerLogBodyUserLocation {
}

message PlayerLogBodyPlayerDisconnect {
    string account_uid = 1;
    string nickname = 2;
    uint32 reason = 3;
}

message ClientStatData {
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;
    uint32 fps = 4;
    uint32 memory = 5;
}

message TeamAvatarLog {
    uint32 avatar_type = 1;
    uint32 avatar_id = 2;
}

message PlayerLogBodyChangeSceneTeam {
    repeated TeamAvatarLog removed_avatar_list = 1;
    repeated TeamAvatarLog added_avatar_list = 2;
    repeated TeamAvatarLog cur_avatar_list = 3;
    uint32 level1_area_id = 4;
    uint32 level2_area_id = 5;
    bool is_in_mp = 6;
    uint32 change_reason = 7;
}

message PlayerLogBodySetUpAvatarTeam {
    uint32 team_id = 1;
    repeated uint64 before_avatar_id_list = 2;
    repeated uint64 cur_avatar_id_list = 3;
}

message PlayerLogBodyChooseCurAvatarTeam {
    uint32 before_team_id = 1;
    repeated uint64 before_avatar_id_list = 2;
    uint32 cur_team_id = 3;
    repeated uint64 cur_avatar_id_list = 4;
}

message PlayerLogBodyMissionRemove {
    uint32 mission_remove_type = 1;
    uint32 mission_type = 2;
    uint32 mission_id = 3;
    uint32 start_time = 4;
}

message PlayerLogBodyAvatarHpChange {
    uint32 avatar_level = 1;
    uint64 hp_total = 2;
    int64 hp_add = 3;
    uint64 hp_left = 4;
    uint32 reason = 5;
    uint32 avatar_id = 6;
    uint32 is_auto_use_spring = 7;
    string ability_name = 8;
    EntityLog source_log = 9;
    uint32 hp_minus = 10;
}

message ItemLog {
    uint32 item_id = 1;
    uint32 count = 2;
}

message AffixLog {
    uint32 affix_id = 1;
    uint32 affix_level = 2;
}

message WeaponLog {
    uint64 guid = 1;
    uint32 weapon_id = 2;
    uint32 speciality = 3;
    uint32 level = 5;
    uint32 promote_level = 6;
    repeated AffixLog affix_list = 7;
}

message RelicLog {
    uint64 guid = 1;
    uint32 relic_id = 2;
    uint32 part = 3;
    uint32 rank_level = 5;
    uint32 level = 6;
    uint32 promote_level = 7;
    uint32 main_prop_id = 8;
    repeated uint32 append_prop_id_list = 9;
}

message SkillLevelLog {
    uint32 skill_id = 1;
    uint32 skill_level = 2;
}

message SkillDepotLog {
    uint32 skill_depot_id = 1;
    repeated SkillLevelLog skill_level_list = 2;
}

message AvatarLog {
    uint32 avatar_id = 1;
    uint32 level = 2;
    uint32 promote_level = 3;
    WeaponLog weapon = 4;
    RelicLog relic_bracer = 5;
    RelicLog relic_dress = 6;
    RelicLog relic_shoes = 7;
    RelicLog relic_ring = 8;
    RelicLog relic_necklace = 9;
    repeated AffixLog relic_set_affix_list = 10;
    uint32 life_state = 11;
    uint32 hp_percent = 12;
    uint32 avatar_combat_force = 13;
    uint32 skill_depot_id = 14;
    uint32 owner_uid = 15;
    bool is_trial = 16;
    repeated SkillDepotLog skill_depot_list = 17;
    repeated uint32 team_resonance_list = 18;
    uint32 avatar_type = 19;
}

message PlayerLogBodyAvatarDeathRevival {
    AvatarLog avatar = 1;
    uint32 reason = 2;
    string combat_transaction = 3;
    string dungeon_transaction = 4;
}

message EntityLog {
    uint32 entity_type = 1;
    uint32 id = 2;
    uint32 group_id = 3;
    uint32 config_id = 4;
    int32 x_coordinate = 5;
    int32 y_coordinate = 6;
    int32 z_coordinate = 7;
    repeated uint32 level = 8;
}

message AttackEntityLog {
    uint32 entity_type = 1;
    uint32 id = 2;
    uint32 group_id = 3;
    uint32 config_id = 4;
    repeated uint32 level = 5;
}

message CombatAvatarLog {
    uint32 avatar_id = 1;
    uint32 avatar_level = 2;
    uint32 hp = 3;
}

message PlayerLogBodyCombatStart {
    string combat_transaction = 1;
    repeated AvatarLog avatar_list = 2;
    EntityLog monster_log = 3;
    uint32 player_combat_force = 4;
    repeated CombatAvatarLog avatar_log_list = 5;
}

message PlayerLogBodyCombatEnd {
    enum CombatEndReason {
        COMBAT_END_NONE = 0;
        COMBAT_END_MONSTER_DIE = 1;
        COMBAT_END_MONSTER_ALERT_CHANGE = 2;
        COMBAT_END_AVATAR_DISAPPEAR = 3;
        COMBAT_END_ALL_AVATAR_DEAD = 4;
    }

    string combat_transaction = 1;
    uint32 is_changed_equip = 2;
    uint32 combat_end_reason = 3;
}

message DamageExtraLog {
    string name = 1;
    float value = 2;
}

message PlayerLogBodyDoHurt {
    uint32 trans_type = 1;
    string transaction = 2;
    string dungeon_transaction = 3;
    uint32 target_type = 4;
    uint32 target_id = 5;
    string ability_name = 6;
    string modifier_name = 7;
    string attack_tag = 8;
    uint32 element_type = 9;
    string anim_event_id = 10;
    uint64 ori_hurt = 11;
    uint64 block_shield_hurt = 12;
    uint64 ratio_hurt = 13;
    uint64 real_hurt = 14;
    repeated DamageExtraLog ori_hurt_from_damage_extra = 15;
    uint32 hurt_count = 16;
}

message PlayerLogBodyBeHurt {
    uint32 trans_type = 1;
    string transaction = 2;
    string dungeon_transaction = 3;
    uint32 target_type = 4;
    uint32 target_id = 5;
    string ability_name = 6;
    string modifier_name = 7;
    string attack_tag = 8;
    uint32 element_type = 9;
    string anim_event_id = 10;
    uint32 source_type = 11;
    uint32 source_id = 12;
    uint64 ori_hurt = 13;
    uint64 block_shield_hurt = 14;
    uint64 ratio_hurt = 15;
    uint64 real_hurt = 16;
    repeated DamageExtraLog ori_hurt_from_damage_extra = 17;
    uint32 hurt_count = 18;
}

message PlayerLogBodyBeHeal {
    uint32 trans_type = 1;
    string transaction = 2;
    string dungeon_transaction = 3;
    uint32 avatar_id = 4;
    string ability_name = 5;
    string modifier_name = 6;
    uint64 real_heal = 7;
    uint64 total_heal = 8;
}

message AvatarPresentTimeLog {
    uint32 avatar_id = 1;
    uint32 time = 2;
}

message PlayerLogBodyAvatarPresentTime {
    uint32 trans_type = 1;
    string transaction = 2;
    string dungeon_transaction = 3;
    uint32 combat_time = 4;
    repeated AvatarPresentTimeLog time_list = 5;
}

message PlayerLogBodyDungeonEnter {
    string transaction = 1;
    uint32 dungeon_id = 2;
    uint32 dungeon_type = 3;
    uint32 dungeon_mp = 4;
    repeated AvatarLog avatar_list = 5;
    repeated uint32 level_config_id_list = 6;
}

message PlayerLogBodyDungeonQuit {
    string transaction = 1;
    uint32 dungeon_id = 2;
    uint32 dungeon_type = 3;
    uint32 dungeon_mp = 4;
    repeated AvatarLog avatar_list = 5;
    uint32 reason = 6;
}

message PlayerLogBodyDungeonSettle {
    string transaction = 1;
    uint32 dungeon_id = 2;
    uint32 dungeon_type = 3;
    uint32 dungeon_mp = 4;
    repeated AvatarLog avatar_list = 5;
    uint32 use_time = 6;
    uint32 dungeon_settle_type = 7;
}

message PlayerLogBodyDungeonDieOption {
    string transaction = 1;
    uint32 dungeon_id = 2;
    uint32 die_option = 3;
}

message PlayerLogBodyCollectGather {
    uint32 gadget_id = 1;
    repeated ItemLog item_vec = 2;
}

message PlayerLogBodyOpenChest {
    uint32 gadget_id = 1;
    repeated ItemLog item_vec = 2;
    uint32 state = 3;
    EntityLog entity_log = 4;
}

message PlayerLogBodyOpenBossChest {
    uint32 gadget_id = 1;
    repeated ItemLog item_vec = 2;
    uint32 state = 3;
    EntityLog entity_log = 4;
    uint32 resin = 5;
    uint32 dungeon_id = 6;
}

message PlayerLogBodyOpenBlossomChest {
    uint32 gadget_id = 1;
    repeated ItemLog item_vec = 2;
    uint32 state = 3;
    EntityLog entity_log = 4;
    uint32 resin = 5;
    uint32 blossom_chest_id = 6;
    uint32 reason_type = 7;
    string reunion_version = 8;
}

message PlayerLogBodyDungeonStatueDrop {
    string dungeon_transaction = 1;
    uint32 dungeon_id = 2;
    uint32 cost_item_id = 3;
    uint32 cost_count = 4;
    uint32 reason_type = 7;
    string reunion_version = 8;
}

message ScenePointLog {
    uint32 scene_id = 1;
    uint32 point_id = 2;
    uint32 type = 3;
    string dollar_type = 4;
    int32 x_coordinate = 5;
    int32 y_coordinate = 6;
    int32 z_coordinate = 7;
}

message PlayerLogBodyTransport {
    ScenePointLog to_point_log = 1;
    bool is_by_anchor_point = 2;
}

message PlayerLogBodyUnlockPoint {
    ScenePointLog point_log = 1;
}

message PlayerLogBodyGadgetDie {
    uint32 gadget_id = 1;
    uint32 change_hp_reason = 2;
    uint32 attacker_entity_type = 3;
}

message PlayerLogBodyUnlockArea {
    uint32 scene_id = 1;
    uint32 area_id = 2;
    uint32 level1_area_id = 3;
    uint32 level2_area_id = 4;
}

message PlayerLogBodyLevelupCity {
    uint32 scene_id = 1;
    uint32 city_id = 2;
    uint32 level1_area_id = 3;
    uint32 level2_area_id = 4;
    uint32 old_level = 5;
    uint32 cur_level = 6;
}

message PlayerLogBodyMonsterDie {
    uint32 scene_id = 1;
    EntityLog monster_log = 2;
    uint32 reason = 3;
    string combat_transaction = 4;
    repeated uint32 attacker_list = 5;
}

message PlayerLogBodyAreaExploration {
    uint32 level1_area_id = 1;
    uint32 level2_area_id = 2;
    uint32 type = 3;
    uint32 explore_num = 7;
    uint32 add_point = 4;
    uint32 cur_point = 5;
    uint32 total_point = 6;
}

message PlayerLogBodyEnterElementView {
    uint32 avatar_id = 1;
    uint32 is_triggerd = 2;
}

message PlayerLogBodyMarkPlayerAction {
    uint32 group_id = 1;
    uint32 param1 = 2;
    uint32 param2 = 3;
    uint32 param3 = 4;
}

message PlayerLogBodyMonsterStateChange {
    uint32 group_id = 1;
    uint32 monster_id = 2;
    string dungeon_transaction = 3;
    string mp_play_transaction = 4;
    repeated int32 param_list = 5;
}

message VehicleLog {
    string vehicle_transaction = 1;
    uint32 owner_uid = 2;
    uint32 gadget_id = 3;
    uint32 host_uid = 4;
    uint32 scene_id = 5;
    PositionLog pos = 6;
}

message PlayerLogBodyCreateVehicle {
    VehicleLog vehicle = 1;
    uint32 reason = 2;
    uint32 reason_extra = 3;
}

message PlayerLogBodyDestoryVehicle {
    VehicleLog vehicle = 1;
    uint32 reason = 2;
}

message PlayerLogBodyEnterVehicle {
    VehicleLog vehicle = 1;
    string op_transaction = 2;
}

message PlayerLogBodyExitVehicle {
    VehicleLog vehicle = 1;
    string op_transaction = 2;
}

message PlayerLogBodyResistClimateMixinChange {
    uint32 op = 1;
    uint32 is_expire = 2;
    string ability = 3;
    string modifier = 4;
    uint32 avatar_id = 5;
    int32 ratio = 6;
}

message PlayerLogBodyEnterWorld {
    uint32 owner_uid = 1;
    uint32 dest_scene_id = 2;
    string transaction = 3;
}

message PlayerLogBodyLeaveWorld {
    uint32 owner_uid = 1;
    uint32 scene_id = 2;
    uint32 dest_owner_uid = 3;
    uint32 dest_scene_id = 4;
    string transaction = 5;
}

message PlayerLogBodyAddAvatar {
    uint32 avatar_id = 1;
    uint32 avatar_quality = 2;
    uint32 add_avatar_reason = 3;
    uint32 action_reason = 4;
}

message PlayerLogBodyAvatarLevelup {
    uint32 avatar_id = 1;
    uint32 avatar_quality = 2;
    uint32 promote_level_before = 3;
    uint32 promote_level_after = 4;
}

message PlayerLogBodyAvatarAddExp {
    uint32 avatar_id = 1;
    uint32 avatar_quality = 2;
    uint32 level_before = 3;
    uint32 level_after = 4;
    uint32 exp_add = 5;
    uint32 exp_value = 6;
    uint32 exp_percent = 7;
    uint32 use_material_id = 8;
    uint32 use_material_num = 9;
    uint32 reason = 10;
}

message PlayerLogBodyAvatarUpgrade {
    uint32 avatar_id = 1;
    uint32 avatar_quality = 2;
    uint32 level_before = 3;
    uint32 level_after = 4;
    AvatarLog avatar_log = 5;
}

message PlayerLogBodyAvatarUpgradeProudSkill {
    uint32 avatar_id = 1;
    uint32 avatar_level = 2;
    uint32 element_type = 3;
    uint32 proud_skill_type = 4;
    uint32 proud_skill_group_id = 5;
    uint32 proud_skill_level = 6;
}

message PlayerLogBodyAvatarUpgradeActiveSkill {
    uint32 avatar_id = 1;
    uint32 avatar_level = 2;
    uint32 element_type = 3;
    uint32 skill_id = 4;
    uint32 skill_level = 5;
}

message PlayerLogBodyAvatarActiveTalent {
    uint32 avatar_id = 1;
    uint32 avatar_level = 2;
    uint32 element_type = 3;
    uint32 talent_id = 4;
    uint32 cost_item_id = 5;
    uint32 cost_item_count = 6;
}

message PlayerLogBodySatiationChange {
    uint32 avatar_type = 1;
    uint32 avatar_id = 2;
    int32 satiation_change = 3;
    uint32 satiation_val = 4;
    uint32 is_overeat = 5;
    uint32 item_id = 6;
    uint32 item_count = 7;
}

message PlayerLogBodyWeaponAdd {
    WeaponLog weapon = 1;
    int32 weapon_add = 2;
    uint32 weapon_num = 3;
    uint32 reason_type = 4;
    uint32 item_limit_type = 5;
}

message PlayerLogBodyWeaponLevelup {
    WeaponLog weapon = 1;
    uint32 weapon_level_before = 2;
    uint32 promote_level_before = 3;
    uint32 op = 4;
}

message PlayerLogBodyRelicAdd {
    RelicLog relic = 1;
    int32 relic_add = 2;
    uint32 relic_num = 3;
    uint32 reason_type = 4;
    uint32 item_limit_type = 5;
}

message PlayerLogBodyRelicLevelup {
    RelicLog relic = 1;
    uint32 relic_level_before = 2;
    uint32 promote_level_before = 3;
    uint32 op = 4;
}

message PlayerLogBodyWearWeapon {
    uint32 op = 1;
    uint32 avatar_id = 2;
    WeaponLog weapon_log = 3;
}

message PlayerLogBodyWearRelic {
    uint32 op = 1;
    uint32 avatar_id = 2;
    RelicLog relic_log = 3;
}

message PlayerLogBodyWeaponAwaken {
    WeaponLog weapon_log = 1;
    repeated AffixLog cur_affix_list = 2;
}

message PlayerLogBodyTeam {
    uint32 target_uid = 1;
    uint32 op = 2;
    uint32 dungeon_id = 3;
    uint32 duration = 4;
}

message PlayerLogBodyTeamSwitch {
    uint32 before_op = 1;
    uint32 op = 2;
}

message PlayerLogBodyApplyResult {
    enum SOURCE {
        SOURCE_NORMAL = 0;
        SOURCE_FRIEND = 1;
        SOURCE_MATCH = 2;
    }

    uint32 target_uid = 1;
    uint32 is_agreed = 2;
    uint32 reason = 3;
    uint32 request_source = 4;
}

message PlayerLogBodyDealWithApply {
    uint32 source_uid = 1;
    uint32 is_agreed = 2;
    uint32 reason = 3;
}

message PlayerLogBodyHostEnterMp {
    string transaction = 1;
}

message PlayerLogBodyHostLeaveMp {
    string transaction = 1;
}

message PlayerLogBodyChat {
    uint32 host_uid = 1;
    uint32 scene_id = 2;
    string content = 3;
}

message PlayerLogBodyMpStateChange {
    uint32 target_uid = 1;
    uint32 target_platform_type = 2;
    bool is_friend = 3;
    uint32 duration = 4;
}

message PlayerLogBodyPsMpSwitchChange {
    bool op = 1;
}

message PlayerLogBodyCook {
    uint32 recipe_id = 1;
    repeated ItemLog item_list = 2;
    uint32 type = 3;
    repeated ItemLog food_list = 4;
    uint32 help_avatar_id = 5;
    uint32 help_addition = 6;
    uint32 add_point = 7;
    uint32 recipe_point_after = 8;
    uint32 can_auto_qte = 9;
    uint32 is_auto_qte = 10;
    repeated uint32 proud_skill_id_list = 11;
    uint32 cook_count = 12;
}

message PlayerLogBodyProcessIngredients {
    repeated ItemLog material_input = 1;
    repeated ItemLog material_output = 2;
    uint32 cost_time = 3;
    uint32 compound_id = 4;
    uint32 count = 5;
}

message PlayerLogBodyUnlockRecipe {
    uint32 recipe_id = 1;
}

message ComposeExtraItemLog {
    uint32 item_id = 1;
    uint32 count = 2;
    uint32 reason = 3;
}

message PlayerLogBodyComposeStart {
    uint32 avatar_id = 1;
    repeated uint32 proud_skill_id_list = 2;
    uint32 compo_id = 3;
    uint32 compo_preset_num = 4;
    uint32 target_item_type = 5;
    repeated ItemLog input_item = 6;
    repeated ItemLog main_output_item = 7;
    repeated ComposeExtraItemLog sub_output_item = 8;
    uint32 currency_cost = 9;
}

message PlayerLogBodyForgeStart {
    uint32 avatar_id = 1;
    repeated uint32 proud_skill_id_list = 2;
    uint32 forge_id = 3;
    repeated ItemLog input_item = 4;
    repeated ItemLog output_item = 5;
    uint32 target_type = 6;
    uint32 target_time = 7;
    uint32 transaction_no = 8;
    repeated ItemLog target_item = 9;
}

message ForgeOutputItem {
    uint32 item_id = 1;
    uint32 item_get_num = 2;
    uint32 item_left_num = 3;
}

message PlayerLogBodyForgeGetOutput {
    uint32 transaction_no = 1;
    uint32 currency_cost = 2;
    repeated ForgeOutputItem main_output_item = 3;
    repeated ItemLog sub_output_item = 4;
    repeated ItemLog random_output_item = 5;
}

message PlayerLogBodyForgeFinish {
    uint32 transaction_no = 1;
    uint32 reason = 2;
    uint32 use_time = 3;
    uint32 finish_time = 4;
    uint32 left_num = 5;
    repeated ItemLog sub_output_item = 6;
}

message PlayerLogBodyChallengeBegin {
    uint32 group_id = 1;
    string trigger_name = 2;
    string tlog_tag = 3;
    string tag = 4;
    uint32 challenge_id = 5;
    uint32 challenge_type = 6;
    uint32 challenge_index = 7;
    repeated uint32 param_list = 8;
    uint32 father_index = 9;
    string trans_no = 10;
    repeated CombatAvatarLog avatar_log_list = 11;
}

message ChallengeCondLog {
    uint32 condition_type = 1;
    uint32 progress = 2;
}

message PlayerLogBodyChallengeFinish {
    enum FinishType {
        SUCC = 0;
        FAIL = 1;
        STOP = 2;
        TIMEOUT = 3;
        EXIT_SIGHT = 4;
        PAUSE = 5;
    }

    uint32 group_id = 1;
    string trigger_name = 2;
    string tlog_tag = 3;
    string tag = 4;
    uint32 challenge_id = 5;
    uint32 challenge_type = 6;
    uint32 challenge_index = 7;
    uint32 use_time = 9;
    uint32 is_success = 10;
    repeated ChallengeCondLog cond_list = 11;
    string trans_no = 12;
    uint32 reason = 13;
}

message PlayerLogBodyDailyTaskGen {
    uint32 city_id = 1;
    uint32 pool_id = 2;
    uint32 daily_task_id = 3;
    uint32 type = 4;
    uint32 rarity = 5;
    uint32 finish_type = 6;
    bool is_by_group_replaced = 7;
}

message PlayerLogBodyDailyTaskDel {
    enum DelReason {
        NONE = 0;
        REPLACE = 1;
    }

    uint32 city_id = 1;
    uint32 pool_id = 2;
    uint32 daily_task_id = 3;
    uint32 type = 4;
    uint32 rarity = 5;
    uint32 finish_type = 6;
    uint32 delete_reason = 7;
}

message PlayerLogBodyDailyTaskProgress {
    uint32 daily_task_id = 1;
    uint32 progress = 2;
    bool is_finished = 3;
}

message PlayerLogBodyDailyTaskScoreReward {
    uint32 drop_id = 1;
}

message PlayerLogBodyDailyTaskReward {
    uint32 owner_uid = 1;
    uint32 daily_task_id = 2;
    uint32 drop_id = 3;
}

message PlayerLogBodyRandTaskGen {
    uint32 rand_task_id = 1;
    uint32 parent_quest_id = 2;
    uint32 quest_template_id = 3;
    uint32 task_content_type = 4;
    uint32 enter_uid = 5;
}

message PlayerLogBodyRandTaskFinish {
    uint32 rand_task_id = 1;
    uint32 quest_template_id = 2;
    uint32 pattern_id = 3;
    bool is_succ = 4;
    uint32 reason = 5;
    uint32 enter_uid = 6;
}

message PlayerLogBodyRandTaskReward {
    uint32 owner_uid = 1;
    uint32 rand_task_id = 2;
    uint32 drop_id = 3;
    uint32 zone_level = 4;
    uint32 quest_template_id = 5;
}

message PlayerLogBodyWorldLevelAdd {
    uint32 world_level_before = 1;
    uint32 world_level_after = 2;
    uint32 level = 3;
    uint32 exp = 4;
    uint32 reason = 5;
}

message EquipLog {
    uint32 item_id = 1;
    uint32 item_num = 2;
    uint32 item_level = 3;
    uint32 promote_level = 4;
}

message RewardLog {
    uint32 reward_id = 1;
    repeated EquipLog add_equip_list = 2;
}

message PlayerLogBodyTakePlayerLevelReward {
    uint32 take_level = 1;
    uint32 cur_level = 2;
    uint32 cur_exp = 3;
    RewardLog reward_log = 4;
}

message PlayerLogBodyMaterialDeleteReturn {
    repeated LogItemParam delete_material_list = 1;
    repeated LogItemParam return_item_list = 2;
}

message PlayerLogBodyRebate {
    string account_uid = 1;
    repeated ItemLog item_list = 2;
}

message PlayerLogBodyUncheckedNickname {
    string nick_name = 1;
}

message CityLog {
    uint32 city_id = 1;
    uint32 level = 2;
    uint32 crystal_num = 3;
}

message PlayerLogBodyRecordCityDataBeforeCheckAndModify {
    repeated CityLog city_log_list = 1;
}

message AreaExploreLog {
    uint32 area_id = 1;
    uint32 old_total_exp = 2;
    uint32 total_exp = 3;
    uint32 trans_point_exp = 4;
    uint32 open_chest_exp = 5;
    uint32 gather_exp = 6;
    uint32 temple_exp = 7;
    uint32 item_exp = 8;
}

message PlayerLogBodyCalcAndRecordAreaExplorePoint {
    repeated AreaExploreLog area_explore_list = 1;
}

message PlayerLogBodyMarkMap {
    string mark_name = 1;
    int32 mark_op = 2;
    int32 point_type = 3;
    int32 mark_x = 4;
    int32 mark_y = 5;
    uint32 scene_id = 6;
    uint32 from_type = 7;
    uint32 monster_id = 8;
    uint32 quest_id = 9;
    int32 mark_z = 10;
}

message GachaGuaranteeData {
    uint32 guarantee_rule_id = 1;
    uint32 last_gacha_guarantee_times = 2;
}

message GachaItemLog {
    ItemLog award_item = 1;
    repeated ItemLog transfer_item = 2;
    repeated ItemLog token_item_list = 3;
}

message GachaItemTypeTimes {
    uint32 gacha_item_type = 1;
    uint32 last_gacha_times = 2;
}

message GachaItemTypeWeight {
    uint32 gacha_item_type = 1;
    uint32 weight = 2;
}

message GachaItemParentTypeTimes {
    uint32 gacha_item_parent_type = 1;
    uint32 last_gacha_times = 2;
}

message GachaItemParentTypeWeight {
    uint32 gacha_item_parent_type = 1;
    uint32 weight = 2;
}

message PlayerLogBodyDoGacha {
    uint32 gacha_type = 1;
    uint32 schedule_id = 2;
    uint32 gacha_times = 3;
    ItemLog cost_item = 4;
    uint32 total_gacha_times = 5;
    uint32 cur_schedule_total_gacha_times = 6;
    uint32 guarantee_rule_id = 7;
    repeated GachaGuaranteeData guarantee_data_list = 8;
    GachaItemLog gacha_award = 9;
    bool is_item_up = 10;
    bool is_flash_card = 11;
    uint32 gacha_item_type = 12;
    uint32 gacha_item_parent_type = 13;
    repeated GachaItemParentTypeWeight gacha_item_parent_type_weight_list = 14;
    repeated GachaItemParentTypeTimes gacha_item_parent_type_times_list = 15;
    bool is_gacha_up_triggered = 16;
    uint32 gacha_up_prob = 17;
    uint32 gacha_no_up_times = 18;
    repeated GachaItemTypeWeight gacha_item_type_weight_list = 19;
    repeated GachaItemTypeTimes gacha_item_type_times_list = 20;
    bool is_wish_triggered = 21;
    uint32 wish_item_id = 22;
    uint32 wish_progress = 23;
    uint32 special_total_gacha_times = 24;
    uint32 cur_schedule_special_total_gacha_times = 25;
}

message PlayerLogBodyGachaWishProgress {
    uint32 gacha_type = 1;
    uint32 schedule_id = 2;
    uint32 gacha_wish_item_id = 3;
    uint32 before_gacha_wish_progress = 4;
    uint32 gacha_wish_progress = 5;
    uint32 reason = 6;
}

message PlayerLogBodyAvatarFetterChangeExp {
    uint32 avatar_id = 1;
    uint32 change_point = 2;
    uint32 level_before = 3;
    uint32 level_after = 4;
    uint32 reason = 5;
    uint32 all_point = 6;
    uint32 level_point = 7;
}

message AvatarExpeditionReward {
    uint32 item_id = 1;
    uint32 item_count = 2;
}

message PlayerLogBodyAvatarExpeditionStart {
    uint32 avatar_id = 1;
    uint32 is_leave_team = 2;
    uint32 city_id = 3;
    uint32 config_id = 4;
    uint32 expedition_limit_count = 5;
    uint32 expedition_hour_time = 6;
    uint64 expedition_no = 7;
}

message PlayerLogBodyAvatarExpeditionTakeReward {
    uint64 expedition_no = 1;
    uint32 scoin_count = 2;
    repeated AvatarExpeditionReward reward = 3;
}

message PlayerLogBodyAvatarExpeditionFinish {
    uint64 expedition_no = 1;
    uint32 left_time_sec = 2;
    uint32 reason = 3;
    string normal_finish_time = 4;
}

message PlayerLogBodyTakeInvestigationReward {
    uint32 city_id = 1;
    uint32 investigation_id = 2;
    RewardLog reward_log = 3;
}

message PlayerLogBodyTakeInvestigationTargetReward {
    uint32 city_id = 1;
    uint32 investigation_id = 2;
    uint32 investigation_target_id = 3;
    uint32 after_progress = 4;
    uint32 total_progress = 5;
    RewardLog reward_log = 6;
}

message PlayerLogBodyFinishInvestigation {
    uint32 investigation_id = 1;
    uint32 target_id = 2;
}

message PlayerLogBodyMuipOfflineMsgResult {
    string ticket = 1;
    uint32 msg_type = 2;
    int32 result = 3;
    string msg_str = 4;
}

message PlayerLogBodyClientReport {
    string report_type = 1;
    string report_value = 2;
}

message LogItemParam {
    uint32 item_id = 1;
    uint32 count = 2;
}

message PlayerLogBodySeaLampContributeItem {
    repeated LogItemParam item_list = 1;
    uint32 add_contribution = 2;
    uint32 contribution = 3;
}

message PlayerLogBodySeaLampTakeContributionReward {
    uint32 config_id = 1;
    uint32 reward_id = 2;
}

message PlayerLogBodySeaLampTakePhaseReward {
    uint32 phase_id = 1;
    uint32 reward_id = 2;
}

message PlayerLogBodySeaLampFlyLamp {
    uint32 add_contribution = 1;
    uint32 contribution = 2;
    uint32 item_num = 3;
}

message PlayerLogBodyPushTipsChange {
    enum PushTipsOpType {
        NONE = 0;
        ACTIVE = 1;
        READ = 2;
        FINISH = 3;
    }

    uint32 id = 1;
    uint32 guide_id = 2;
    uint32 op = 3;
}

message PlayerLogBodyTowerEnterLevel {
    string tower_level_transaction = 1;
    uint32 schedule_id = 2;
    uint32 floor_index = 3;
    uint32 level_index = 4;
    repeated AvatarLog first_avatar_list = 5;
    repeated AvatarLog second_avatar_list = 6;
    uint32 path = 7;
}

message PlayerLogBodyTowerSettle {
    enum TowerResultType {
        SUCC = 0;
        FAIL = 1;
    }

    string tower_level_transaction = 1;
    uint32 schedule_id = 2;
    uint32 floor_index = 3;
    uint32 level_index = 4;
    uint32 path = 5;
    uint32 result = 6;
    uint32 floor_star_num = 7;
    uint32 schedule_star_num = 8;
    repeated uint32 satisfied_star_condition_list = 9;
    uint32 cur_tower_buff_id = 10;
    repeated uint32 tower_buff_list = 11;
    uint32 level_star_num = 12;
}

message PlayerLogBodyTowerUnlockFloor {
    uint32 schedule_id = 1;
    uint32 floor_index = 2;
}

message PlayerLogBodyTowerFirstPassReward {
    uint32 reason = 1;
    uint32 reward_id = 2;
    uint32 schedule_id = 3;
    uint32 floor_index = 4;
    uint32 level_index = 5;
}

message PlayerLogBodyTowerFloorStarReward {
    uint32 reason = 1;
    repeated uint32 reward_id_list = 2;
    uint32 schedule_id = 3;
    uint32 floor_index = 4;
    uint32 floor_star_num = 5;
}

message TowerFightStatPair {
    uint32 avatar_id = 1;
    uint32 data = 2;
}

message PlayerLogBodyTowerMonthlySummary {
    uint32 schedule_id = 1;
    uint32 best_floor_index = 2;
    uint32 best_level_index = 3;
    uint32 cur_schedule_start_floor_index = 4;
    uint32 total_start_num = 5;
    repeated TowerFightStatPair most_revealed_avatar_pair_list = 6;
    TowerFightStatPair most_kill_avatar_pair = 7;
    TowerFightStatPair highest_dps_avatar_pair = 8;
    TowerFightStatPair most_take_damage_avatar_pair = 9;
    TowerFightStatPair most_cast_normal_skill_avatar_pair = 10;
    TowerFightStatPair most_cast_energy_skill_avatar_pair = 11;
    uint32 monthly_level_config_id = 12;
}

message PlayerLogBodyResinChange {
    int32 original_delta = 1;
    int32 real_delta = 2;
    uint32 cur_value = 3;
    uint32 reason = 4;
}

message DropLog {
    uint32 drop_id = 1;
    uint32 drop_num = 2;
    uint32 item_limit_type = 3;
    uint32 daily_num = 4;
    uint32 history_num = 5;
    string daily_num_limit = 6;
    string history_num_limit = 7;
    uint32 activity_num = 8;
    string activity_num_limit = 9;
}

message PlayerLogBodyAddDrop {
    repeated DropLog drop_log_list = 1;
}

message PlayerRewardLog {
    uint32 reward_id = 1;
    uint32 reward_num = 2;
    uint32 item_limit_type = 3;
    uint32 daily_num = 4;
    uint32 history_num = 5;
    string daily_num_limit = 6;
    string history_num_limit = 7;
    uint32 activity_num = 8;
    string activity_num_limit = 9;
}

message PlayerLogBodyAddReward {
    repeated PlayerRewardLog reward_log_list = 2;
}

message PlayerLogBodyItemLimitTypeLimit {
    uint32 item_limit_type = 1;
    uint32 daily_num = 2;
    uint32 history_num = 3;
    string daily_num_limit = 4;
    string history_num_limit = 5;
    uint32 activity_num = 6;
    string activity_num_limit = 7;
}

message PlayerLogBodyFinishH5Watcher {
    uint32 h5_activity_id = 1;
    uint32 h5_schedule_id = 2;
    uint32 watcher_id = 3;
}

message H5ActivityWatcherLog {
    uint32 watcher_id = 1;
    uint32 progress = 2;
}

message PlayerLogBodyH5WatcherOnH5ActivityFinish {
    uint32 h5_activity_id = 1;
    uint32 h5_schedule_id = 2;
    repeated H5ActivityWatcherLog watcher_list = 3;
}

message PlayerLogBodyOperateFriend {
    enum FriendActionType {
        ADD = 0;
        DELETE = 1;
    }

    uint32 target_uid = 1;
    uint32 friend_action = 2;
    uint32 self_friend_num = 3;
    uint32 target_friend_num = 4;
}

message PlayerLogBodyBlossomCircleCampRefresh {
    uint32 refresh_id = 1;
    uint32 circle_camp_id = 2;
    uint32 city_id = 3;
    uint32 section_id = 4;
    repeated uint32 new_group_id_list = 5;
    repeated uint32 decorate_group_id_list = 6;
    uint32 refresh_type = 7;
}

message PlayerLogBodyBlossomProgressBegin {
    uint32 refresh_id = 1;
    uint32 circle_camp_id = 2;
    uint32 city_id = 3;
    uint32 section_id = 4;
    uint32 refresh_type = 5;
    uint32 monster_level = 6;
    uint32 round_max_count = 7;
    uint32 round = 8;
}

message PlayerLogBodyBlossomProgressFinish {
    uint32 refresh_id = 1;
    uint32 circle_camp_id = 2;
    uint32 city_id = 3;
    uint32 section_id = 4;
    uint32 refresh_type = 5;
    uint32 monster_level = 6;
    uint32 climate_meter = 7;
    repeated uint32 avatar_id_list = 8;
    float vehicle_hp_percent = 9;
}

message PlayerLogBodyGetSignInReward {
    uint32 schedule_id = 1;
    uint32 config_id = 2;
    uint32 reward_day = 4;
    repeated ItemLog reward_item_list = 5;
}

message PlayerLogBodySalesmanDeliverItem {
    uint32 schedule_id = 1;
    uint32 day_index = 2;
}

message PlayerLogBodySalesmanTakeSpecialReward {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 drop_id = 3;
    repeated ItemLog item_vec = 4;
}

message PlayerLogBodyBattlePassBuy {
    uint32 schedule_id = 1;
    uint32 buy_play_type = 2;
    uint32 cur_level = 3;
    uint32 pass_days = 4;
}

message PlayerLogBodyBattlePassTakeLevelReward {
    uint32 schedule_id = 1;
    uint32 level = 2;
    uint32 unlock_status = 3;
    uint32 reward_id = 4;
    uint32 option_idx = 5;
    repeated ItemLog item_vec = 6;
}

message PlayerLogBodyBattlePassAddPoint {
    enum Reason {
        BUY = 0;
        MISSION = 1;
        GM = 2;
        MISSION_DAILY = 3;
        MISSION_CYCLE = 4;
        MISSION_SCHEDULE = 5;
        MISSION_CYCLE_CROSS_SCHEDULE = 6;
    }

    uint32 schedule_id = 1;
    uint32 add_point = 2;
    uint32 cur_point = 3;
    uint32 cur_level = 4;
    uint32 total_need_point = 5;
    uint32 reason = 6;
    uint32 mission_id = 7;
    uint32 cycle_idx = 8;
    uint32 day_idx = 9;
}

message PlayerLogBodyBattlePassLevelUp {
    uint32 schedule_id = 1;
    uint32 cur_level = 2;
    uint32 cur_point = 3;
    uint32 unlock_status = 4;
}

message PlayerLogBodyBattlePassMissionUpdate {
    uint32 schedule_id = 1;
    uint32 mission_id = 2;
    bool is_delete = 3;
    uint32 mission_status = 4;
    uint32 mission_type = 5;
    uint32 cycle_idx = 6;
    uint32 day_idx = 7;
}

message PlayerLogBodyBattlePassAddPointSplit {
    uint32 schedule_id = 1;
    uint32 add_point = 2;
    uint32 cur_level = 3;
    uint32 reason = 4;
    uint32 mission_id = 5;
    uint32 cycle_idx = 6;
    uint32 day_idx = 7;
}

message PlayerLogBodyBattlePassBuyLevel {
    uint32 schedule_id = 1;
    uint32 buy_level = 2;
    uint32 cur_level = 3;
    uint32 cost_hcoin_num = 5;
}

message PlayerLogBodyMatchStart {
    uint32 match_type = 1;
    uint32 target_id = 2;
    uint32 player_count = 3;
    repeated uint32 player_uid_list = 4;
}

message PlayerLogBodyMatchStop {
    uint32 match_type = 1;
    uint32 target_id = 2;
    uint32 reason = 3;
    uint32 cost_time = 4;
}

message PlayerLogBodyActivityTakeWatcher {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 watcher_id = 3;
    uint32 reward_id = 4;
}

message PlayerLogBodyActivityFinishWatcher {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 watcher_id = 3;
}

message PlayerLogBodyMpPlayJoin {
    uint32 mp_play_id = 1;
    string transaction_no = 2;
    bool is_halfway = 3;
}

message PlayerLogBodyMpPlayBattleStop {
    uint32 mp_play_id = 1;
    string transaction_no = 2;
    uint32 cost_time = 3;
    uint32 team_score = 4;
    bool is_win = 5;
    repeated uint64 avatar_id_list = 6;
    bool is_mp = 7;
}

message PlayerLogBodyMpPlayBattleReward {
    uint32 mp_play_id = 1;
    string transaction_no = 2;
    uint32 cost_resion = 3;
    uint32 drop_id = 4;
}

message PlayerLogBodyChangeNameCard {
    uint32 name_card_id = 1;
}

message PlayerLogBodyAvatarChangeFlycloak {
    uint32 avatar_id = 1;
    uint32 flycloak_id = 2;
    uint32 rank_level = 3;
}

message PlayerLogBodyTrialAvatarActivityEnterDungeon {
    uint32 schedule_id = 1;
    uint32 trial_avatar_index = 2;
    string transaction = 3;
}

message PlayerLogBodyTrialAvatarActivityChallengeSuccess {
    uint32 schedule_id = 1;
    uint32 trial_avatar_index = 2;
    string transaction = 3;
}

message PlayerLogBodyAvatarGainFlycloak {
    uint32 flycloak_id = 1;
    uint32 gain_reason = 2;
}

message PlayerLogBodyGainNameCard {
    uint32 name_card_id = 1;
    uint32 gain_reason = 2;
}

message PlayerLogBodyAvatarFetterOpen {
    uint32 fetter_id = 1;
    uint32 avatar_id = 2;
}

message PlayerLogBodyGetActivityReward {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 reward_id = 3;
}

message PlayerLogBodyCodex {
    uint32 type = 1;
    uint32 codex_id = 2;
    uint32 add_exp = 3;
    uint32 exp = 4;
}

message PlayerLogBodyCodexLevelup {
    uint32 level = 1;
}

message PlayerLogBodyOperateBlacklist {
    enum BlacklistActionType {
        ADD = 0;
        DELETE = 1;
    }

    uint32 target_uid = 1;
    uint32 operate_type = 2;
}

message PlayerLogBodyChangeLegendaryKey {
    enum ChangeType {
        ADD = 0;
        SUB = 1;
    }

    uint32 change_type = 1;
    uint32 cur_value = 2;
    uint32 reason_type = 3;
    uint32 delta_value = 4;
    uint32 detail_id = 5;
}

message PlayerLogBodyAvatarInfo {
    AvatarLog avatar_log = 1;
}

message PlayerLogBodyExchangeCoin {
    uint32 cost_coin_id = 1;
    uint32 cost_coin_num = 2;
    uint32 add_coin_id = 3;
    uint32 add_coin_num = 4;
    uint32 reason = 5;
}

message PlayerLogBodyThisLoginInfo {
    uint64 save_stat_id = 1;
    uint32 data_version = 2;
}

message PlayerLogBodySaveSuccess {
    uint64 save_stat_id = 1;
    uint32 data_version = 2;
}

message PlayerLogBodyAchievementFinish {
    uint32 achievement_id = 1;
    uint32 goal_id = 2;
    uint32 goal_progress = 3;
    uint32 total_goal_progress = 4;
}

message PlayerLogBodyTakeAchievementReward {
    uint32 achievement_id = 1;
    uint32 goal_id = 2;
    uint32 reward_id = 3;
}

message PlayerLogBodyTakeAchievementGoalReward {
    uint32 goal_id = 1;
    uint32 reward_id = 2;
}

message PlayerLogBodySetQuickUseWidget {
    uint32 material_id = 1;
}

message PlayerLogBodyUseWidget {
    uint32 material_id = 1;
}

message PlayerLogBodyCityReputationAddExp {
    uint32 city_id = 1;
    uint32 reason_type = 2;
    uint32 after_level = 3;
    uint32 after_exp = 4;
    uint32 add_exp = 5;
}

message PlayerLogBodyCityReputationLevelUp {
    uint32 city_id = 1;
    uint32 level = 2;
    uint32 exp = 3;
}

message PlayerLogBodyCityReputationTakeLevelReward {
    uint32 city_id = 1;
    uint32 take_level = 2;
    uint32 take_reward_id = 3;
    uint32 cur_level = 4;
}

message PlayerLogBodyCityReputationTakeQuestReward {
    uint32 city_id = 1;
    uint32 parent_quest_id = 2;
    uint32 reward_id = 3;
}

message PlayerLogBodyCityReputationTakeExploreReward {
    uint32 city_id = 1;
    uint32 explore_id = 2;
    uint32 explore_percent = 3;
    uint32 cur_percent = 4;
}

message PlayerLogBodyCityReputationRequestStatus {
    enum RequestStatus {
        STATUS_NONE = 0;
        STATUS_GEN = 1;
        STATUS_ACCEPT = 2;
        STATUS_CANCEL = 3;
        STATUS_FINISH = 4;
    }

    uint32 city_id = 1;
    uint32 request_id = 2;
    uint32 quest_id = 3;
    uint32 status = 4;
    uint32 reward_id = 5;
}

message PlayerLogBodyHuntingOpOffer {
    enum HuntingOperand {
        OP_TAKE = 0;
        OP_GIVE_UP = 1;
    }

    uint32 city_id = 1;
    uint32 refresh_id = 2;
    uint32 monster_config_id = 3;
    uint32 difficulty = 4;
    uint32 op = 5;
}

message PlayerLogBodyHuntingStart {
    uint32 city_id = 1;
    uint32 refresh_id = 2;
    uint32 monster_config_id = 3;
    uint32 difficulty = 4;
    string hunting_transaction = 5;
}

message PlayerLogBodyHuntingSettle {
    enum HuntingResult {
        RESULT_SUCC = 0;
        RESULT_TIME_UP = 1;
        RESULT_LOGOUT = 2;
    }

    uint32 city_id = 1;
    uint32 refresh_id = 2;
    uint32 monster_config_id = 3;
    uint32 difficulty = 4;
    uint32 cost_time = 5;
    uint32 result = 6;
    string hunting_transaction = 7;
}

message PlayerLogBodyHuntingTakeReward {
    uint32 city_id = 1;
    uint32 refresh_id = 2;
    uint32 monster_config_id = 3;
    uint32 difficulty = 4;
    uint32 reward_id = 5;
}

message PlayerLogBodyDeliveryWatcherTriggerFailed {
    uint32 schedule_id = 1;
    uint32 day_index = 2;
    uint32 watcher_id = 3;
    uint32 quest_id = 4;
}

message PlayerLogBodyDeliveryTakeDailyReward {
    uint32 schedule_id = 1;
    uint32 day_index = 2;
    uint32 reward_id = 3;
}

message PlayerLogBodyTakeGeneralReward {
    uint32 gadget_id = 1;
    uint32 drop_id = 2;
    uint32 reward_id = 3;
    uint32 resin = 4;
    EntityLog entity_log = 5;
    LogItemParam cost_item = 6;
}

message PlayerLogBodyAsterMidBattleBegin {
    uint32 camp_id = 1;
    uint32 difficulty_id = 2;
    string transaction_no = 3;
}

message PlayerLogBodyAsterMidBattleEnd {
    uint32 camp_id = 1;
    uint32 difficulty_id = 2;
    string transaction_no = 3;
    uint32 cost_time = 4;
    bool is_win = 5;
    uint32 world_player_count = 6;
    repeated uint64 avatar_id_list = 7;
}

message PlayerLogBodyFlightActivityDailyChallengeBegin {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 day_id = 3;
    uint32 group_id = 4;
    string transaction_no = 5;
}

message PlayerLogBodyFlightActivityDailyChallengeSettle {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 day_id = 3;
    uint32 group_id = 4;
    uint32 result_type = 5;
    uint32 settle_points = 6;
    uint32 left_time_sec = 7;
    uint32 gather_num = 8;
    string transaction_no = 9;
}

message PlayerLogBodyOfferingLevelUp {
    uint32 offering_id = 1;
    uint32 after_level = 2;
}

message PlayerLogBodyLimitSocialRequest {
    enum SocialLimitType {
        LIMIT_FRIEND_REQUEST = 0;
        LIMIT_MP_REQUEST = 1;
    }

    string nick_name = 1;
    string signature = 2;
    uint32 platform = 3;
    uint32 type = 4;
}

message PlayerLogBodyNickNameChange {
    string nickname_before = 1;
    string nickname_after = 2;
    string client_ip = 3;
    uint32 client_port = 4;
    string gate_ip = 5;
    uint32 gate_port = 6;
    uint32 submit_count = 7;
    uint32 left_submit_count = 8;
    bool is_audit_open = 9;
}

message PlayerLogBodySignatureNameChange {
    string sign_before = 1;
    string sign_after = 2;
    string client_ip = 3;
    uint32 client_port = 4;
    string gate_ip = 5;
    uint32 gate_port = 6;
    uint32 submit_count = 7;
    uint32 left_submit_count = 8;
    bool is_audit_open = 9;
}

message PlayerLogBodyOfferingTakeLevelReward {
    uint32 offering_id = 1;
    uint32 level = 2;
    uint32 take_level = 3;
    uint32 reward_id = 4;
}

message PlayerLogBodyRoutineTypeOpen {
    uint32 routine_type = 1;
}

message PlayerLogBodyRoutineTypeClose {
    uint32 routine_type = 1;
}

message PlayerLogBodyRoutineGen {
    uint32 routine_type = 1;
    uint32 routine_id = 2;
}

message PlayerLogBodyRoutineProgress {
    uint32 routine_type = 1;
    uint32 routine_id = 2;
    uint32 progress = 3;
    bool is_finished = 4;
}

message PlayerLogBodyRoutineReward {
    uint32 owner_uid = 1;
    uint32 routine_type = 2;
    uint32 routine_id = 3;
    uint32 reward_id = 4;
}

message PlayerLogBodyEffigyEnterDungeon {
    string transaction = 1;
    uint32 challenge_id = 2;
    uint32 dungeon_id = 3;
    uint32 difficulty_id = 4;
    repeated uint32 condition_id_list = 5;
    uint32 challenge_score = 6;
}

message PlayerLogBodyEffigyScoreChange {
    string transaction = 1;
    uint32 add_score = 2;
    uint32 challenge_score = 3;
    uint32 cur_score = 4;
}

message PlayerLogBodyEffigySettleChallenge {
    string dungeon_transaction = 1;
    uint32 dungeon_id = 2;
    uint32 challenge_id = 3;
    uint32 difficulty_id = 4;
    bool is_mp = 5;
    repeated uint32 condition_id_list = 6;
    uint32 challenge_score = 7;
    uint32 cur_score = 8;
    repeated AvatarLog avatar_log_list = 9;
    uint32 cost_time = 10;
    bool is_success = 11;
}

message PlayerLogBodyGadgetStateChange {
    uint32 group_id = 1;
    uint32 gadget_id = 2;
    uint32 config_id = 3;
    uint32 old_state = 4;
    uint32 new_state = 5;
    uint32 entity_id = 6;
}

message PlayerLogBodyElementChallengeDungeonSuccess {
    uint32 dungeon_id = 1;
    string transaction = 2;
}

message PlayerLogBodyDragonSpineEnhanceWeapon {
    uint32 activity_ability_group_id = 1;
}

message PlayerLogBodyReunionActivate {
    string game_version = 1;
    uint32 start_time = 2;
    uint32 finish_time = 3;
}

message PlayerLogBodyReunionTakeSignInReward {
    string game_version = 1;
    uint32 set_id = 2;
    uint32 day_index = 3;
}

message PlayerLogBodyReunionMissionStateChange {
    enum MissionState {
        NONE = 0;
        REFRESH = 1;
        FINISH = 2;
    }

    string game_version = 1;
    uint32 mission_id = 2;
    uint32 watcher_id = 3;
    uint32 state = 4;
}

message PlayerLogBodyReunionTakeFirstGift {
    string game_version = 1;
    uint32 reward_id = 2;
}

message PlayerLogBodyReunionTakeWatcherReward {
    string game_version = 1;
    uint32 mission_id = 2;
    uint32 watcher_id = 3;
    uint32 delta_score = 4;
    uint32 cur_score = 5;
}

message PlayerLogBodyReunionTakeMissionReward {
    string game_version = 1;
    uint32 mission_id = 2;
    uint32 score = 3;
    uint32 reward_index = 4;
}

message PlayerLogBodyTreasureMapRegionProgress {
    string last_detect_trans_no = 1;
    uint32 region_id = 2;
    uint32 group_id = 3;
    uint32 token_progress = 4;
    uint32 goal = 5;
    bool is_done = 6;
}

message PlayerLogBodyTreasureMapMpChallengeBegin {
    uint32 group_id = 1;
    uint32 challenge_id = 2;
    uint32 challenge_index = 3;
    repeated uint32 uid_list = 4;
    string trans_no = 5;
}

message PlayerLogBodyTreasureMapMpChallengeEnd {
    uint32 group_id = 1;
    uint32 challenge_id = 2;
    uint32 challenge_index = 3;
    repeated uint32 uid_list = 4;
    string trans_no = 5;
    bool is_success = 6;
    uint32 duration = 7;
}

message PlayerLogBodyBlessingPicNumChange {
    enum ChangeReason {
        NONE = 0;
        SCAN = 1;
        ACCEPT = 2;
        REDEEM_REWARD = 3;
        GIVE = 4;
    }

    uint32 day_index = 1;
    uint32 pic_id = 2;
    int32 delta_num = 3;
    uint32 reason = 4;
    uint32 interact_uid = 5;
}

message PlayerLogBodyBlessingRedeemReward {
    uint32 day_index = 1;
    uint32 drop_id = 2;
}

message PlayerLogBodySeaLampPopularity {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 add_popularity = 3;
    uint32 after_popularity = 4;
    uint32 reason = 5;
}

message PlayerLogBodyMiracleRingPlace {
    bool is_deliverd = 1;
    int32 x_coordinate = 5;
    int32 y_coordinate = 6;
    int32 z_coordinate = 7;
}

message PlayerLogBodyMiracleRingDestroy {
    enum DestroyReason {
        REASON_EXIT_SIGHT = 0;
        REASON_ENTER_COMBAT = 1;
        REASON_RETRACT = 2;
        REASON_DROP = 3;
    }

    bool is_deliverd = 1;
    uint32 reason = 2;
}

message MiracleRingTagLog {
    uint32 tag_id = 1;
    uint32 tag_count = 2;
}

message PlayerLogBodyMiracleRingDeliver {
    repeated ItemLog item_vec = 1;
    repeated uint64 guid_list = 2;
    repeated uint32 guid_item_list = 3;
    repeated MiracleRingTagLog tag_log_vec = 4;
}

message MiracleRingDropLog {
    uint32 drop_id = 1;
    uint32 drop_count = 2;
}

message PlayerLogBodyMiracleRingGrant {
    repeated MiracleRingTagLog tag_log_vec = 1;
    repeated MiracleRingDropLog drop_log_vec = 2;
}

message PlayerLogBodyActivityExpeditionStart {
    uint32 path_id = 1;
    uint32 difficulty_id = 2;
    string transaction_no = 3;
    repeated uint32 avatar_id_list = 4;
    uint32 assist_avatar_id = 5;
}

message PlayerLogBodyActivityExpeditionFinish {
    uint32 path_id = 1;
    uint32 difficulty_id = 2;
    string transaction_no = 3;
    uint32 result = 4;
}

message PlayerLogBodyActivityExpeditionTakeReward {
    uint32 path_id = 1;
    uint32 difficulty_id = 2;
    string transaction_no = 3;
    uint32 result = 4;
}

message PlayerLogBodyActivityExpeditionChallengeBegin {
    uint32 challenge_id = 1;
}

message PlayerLogBodyActivityExpeditionChallengeFinish {
    uint32 challenge_id = 1;
    uint32 result = 2;
}

message PlayerLogBodyMechanicusCoin {
    uint32 mechanicus_id = 1;
    uint32 reason = 2;
    int32 delta_coin = 3;
    int32 real_delta_coin = 4;
    uint32 after_coin = 5;
    uint32 limit_coin = 6;
}

message PlayerLogBodyMechanicusLevelupGear {
    uint32 mechanicus_id = 1;
    uint32 gear_id = 2;
    uint32 after_level = 3;
    uint32 cost_coin = 4;
}

message MechanicusGearInfo {
    uint32 gear_id = 1;
    uint32 level = 2;
}

message MechanicusRoundEscapedMonsters {
    uint32 round = 1;
    uint32 escaped_num = 2;
}

message PlayerLogBodyMechanicusBattleEnd {
    string transaction = 1;
    uint32 dungeon_id = 2;
    uint32 player_num = 3;
    uint32 dungeon_settle_type = 4;
    uint32 use_time = 5;
    uint32 reward_tokens = 6;
    repeated MechanicusGearInfo gear_info_list = 7;
    uint32 left_points = 8;
    uint32 accumulated_points = 9;
    repeated MechanicusRoundEscapedMonsters round_escape_list = 10;
    uint32 end_round = 11;
}

message PlayerLogBodyRegionSearchAddProgress {
    uint32 play_id = 1;
    uint32 search_id = 2;
    uint32 progress_add = 3;
    uint32 total_progress = 4;
}

message PlayerLogBodyFinishRegionSearch {
    uint32 play_id = 1;
    uint32 search_id = 2;
}

message PlayerLogBodyGalleryBalloonStart {
    uint32 gallery_id = 1;
    string transaction = 2;
    bool is_single = 3;
}

message PlayerLogBodyGalleryBalloonStop {
    uint32 gallery_id = 1;
    string transaction = 2;
    bool is_single = 3;
    uint32 shoot_num = 4;
    uint32 max_combo = 5;
    uint32 duration = 6;
    uint32 score = 7;
}

message PlayerLogBodyGalleryFallStart {
    uint32 gallery_id = 1;
    string transaction = 2;
    bool is_single = 3;
}

message PlayerLogBodyGalleryFallStop {
    uint32 gallery_id = 1;
    string transaction = 2;
    bool is_single = 3;
    uint32 duration = 4;
    uint32 score = 5;
}

message PlayerLogBodyMusicGameStop {
    uint32 music_id = 1;
    uint32 music_basic_id = 2;
    uint32 max_combo = 3;
    uint32 score = 4;
}

message PlayerLogBodyUnlockCoopChapter {
    uint32 chapter_id = 1;
}

message PlayerLogBodyInvokeCoopPoint {
    uint32 chapter_id = 1;
    uint32 point_id = 2;
    repeated uint32 misson_list = 3;
}

message PlayerLogBodyStartCoopPoint {
    uint32 chapter_id = 1;
    uint32 point_id = 2;
    repeated uint32 misson_list = 3;
}

message PlayerLogBodyFinishCoopPoint {
    uint32 chapter_id = 1;
    uint32 point_id = 2;
    repeated uint32 misson_list = 3;
    uint32 ending_save_point_id = 4;
}

message PlayerLogBodyCancelCoopProgress {
    uint32 chapter_id = 1;
    uint32 point_id = 2;
    repeated uint32 misson_list = 3;
}

message PlayerLogBodyUnlockCoopCg {
    uint32 chapter_id = 1;
    uint32 cg_id = 2;
}

message PlayerLogBodyTakeCoopReward {
    uint32 chapter_id = 1;
    uint32 reward_config_id = 2;
}

message PlayerLogBodyFinishMainCoop {
    uint32 chapter_id = 1;
    uint32 point_id = 2;
    uint32 save_point_id = 3;
}

message PlayerLogBodyGroupSuiteChange {
    uint32 scene_id = 1;
    uint32 group_id = 2;
    uint32 old_suite = 3;
    uint32 new_suite = 4;
    uint32 reason = 5;
    uint32 refresh_id = 6;
    uint32 quest_id = 7;
    uint32 activity_id = 8;
    uint32 schedule_id = 9;
    uint32 call_group_id = 10;
    uint32 wq_parent_quest_id = 11;
}

message PlayerLogBodyFleurFairDungeonGalleryStageStart {
    uint32 dungeon_id = 1;
    string dungeon_transaction = 2;
    uint32 stage_index = 3;
    uint32 gallery_id = 4;
    string transaction = 5;
    uint32 energy = 6;
}

message PlayerLogBodyFleurFairDungeonGalleryStageStop {
    uint32 dungeon_id = 1;
    string dungeon_transaction = 2;
    uint32 stage_index = 3;
    uint32 gallery_id = 4;
    string transaction = 5;
    uint32 cost_time = 6;
    uint32 energy = 7;
}

message PlayerLogBodyFleurFairDungeonBossStageStart {
    uint32 dungeon_id = 1;
    string dungeon_transaction = 2;
    uint32 dungeon_section_id = 3;
    string transaction = 4;
}

message PlayerLogBodyFleurFairDungeonBossStageStop {
    uint32 dungeon_id = 1;
    string dungeon_transaction = 2;
    uint32 dungeon_section_id = 3;
    string transaction = 4;
    bool is_succ = 5;
    uint32 cost_time = 6;
}

message PlayerLogBodyTakeHomeLevelReward {
    uint32 home_level = 1;
    uint32 reward_id = 2;
}

message PlayerLogBodyEnterHome {
    uint32 home_uid = 1;
    uint32 module_id = 2;
}

message PlayerLogBodyLeaveHome {
    uint32 home_uid = 1;
    uint32 module_id = 2;
}

message PlayerLogBodyUnlockHomeModule {
    uint32 home_level = 1;
    uint32 module_id = 2;
}

message PlayerLogBodyChangeHomeModule {
    uint32 home_level = 1;
    uint32 module_id_before = 2;
    uint32 module_id_after = 3;
}

message PlayerLogBodyHomeEnterEditMode {
    uint32 home_level = 1;
    uint32 module_id = 2;
    uint32 comfort_value = 3;
    string client_ip = 4;
    uint32 client_port = 5;
    string gate_ip = 6;
    uint32 gate_port = 7;
}

message FurnitureArrangementFurnitureLog {
    uint32 furniture_id = 1;
    uint32 furniture_count = 2;
}

message FurnitureArrangementFurnitureSuiteLog {
    uint32 suite_id = 1;
    uint32 suite_count = 2;
}

message FurnitureArrangementCustomSuiteLog {
    repeated uint32 furniture_id_list = 1;
}

message FurnitureArrangementBlockLog {
    uint32 block_id = 1;
    repeated FurnitureArrangementFurnitureLog furniture_log = 2;
    repeated FurnitureArrangementFurnitureSuiteLog furniture_suite_log = 3;
    repeated uint32 avatar_id_list = 4;
}

message FurnitureArrangementLog {
    uint32 scene_id = 1;
    repeated FurnitureArrangementBlockLog block_log = 2;
    repeated FurnitureArrangementCustomSuiteLog custom_suite_log = 3;
}

message PlayerLogBodyHomeLeaveEditMode {
    uint32 home_level = 1;
    uint32 module_id = 2;
    uint32 comfort_value = 3;
    FurnitureArrangementLog furniture_arrangement_log = 4;
    string client_ip = 5;
    uint32 client_port = 6;
    string gate_ip = 7;
    uint32 gate_port = 8;
}

message PlayerLogBodyHomeAddExp {
    uint64 expected_add_exp = 1;
    uint64 real_add_exp = 8;
    uint32 level_before = 2;
    uint64 exp_before = 3;
    uint32 level_after = 4;
    uint64 exp_after = 5;
    uint32 reason_type = 6;
    uint32 reason_param = 7;
}

message PlayerLogBodyHomeLevelUp {
    uint32 level_after = 1;
    uint32 module_id = 2;
}

message PlayerLogBodyFurnitureMakeTake {
    uint32 furniture_id = 1;
    uint32 accelerate_count = 2;
    uint32 is_fast_finish = 3;
    uint32 accelerate_time = 4;
}

message PlayerLogBodyFurnitureMakeAccelerate {
    uint32 uid = 1;
    uint32 furniture_id = 2;
    uint32 accelerate_time = 3;
}

message PlayerLogBodyHomeLimitedShopBuy {
    uint32 goods_id = 1;
    uint32 uid = 2;
    uint32 buy_count = 3;
    uint32 cost_home_coin = 4;
    uint32 last_count = 5;
}

message PlayerLogBodyHomeEventReward {
    uint32 avatar_id = 1;
    uint32 module_id = 2;
    uint32 suite_id = 3;
    uint32 reward_id = 4;
}

message PlayerLogBodyHomeAvatarAddFetter {
    repeated uint32 avatar_id_list = 1;
    uint32 add_fetter_num = 2;
    uint32 module_id = 3;
    uint32 comfort_value = 4;
    uint32 home_level = 5;
}

message HomeFishItemLog {
    uint32 fish_id = 1;
    uint32 count = 2;
}

message PlayerLogBodyHomeFishpondPlaceFish {
    repeated HomeFishItemLog fish_log = 1;
    uint32 fishpond_type = 2;
}

message PlayerLogBodyHomeFishpondRecycleFish {
    enum RecycleFishReason {
        RECYCLE_FISH_NONE = 0;
        RECYCLE_FISH_NORMAL = 1;
        RECYCLE_FISHPOND = 2;
        RECYCLE_MAIN_HOUSE = 3;
    }

    uint32 reason = 1;
    repeated HomeFishItemLog fish_log = 2;
    uint32 fishpond_type = 3;
}

message PlayerLogBodyHomeCustomFurniturePlace {
    uint32 base_furniture_id = 1;
    repeated uint32 sub_furniture_id_list = 2;
}

message PlayerLogBodyHomeCustomFurnitureRecycle {
    enum RecycleReason {
        RECYCLE_NONE = 0;
        RECYCLE_SUB = 1;
        RECYCLE_BASE = 2;
    }

    uint32 reason = 1;
    uint32 base_furniture_id = 2;
    repeated uint32 sub_furniture_id_list = 3;
}

message PlayerLogBodyHomeUpdatePictureFrame {
    uint32 picture_id = 1;
}

message PlayerLogBodyHomeChangeBgm {
    uint32 bgm_id = 1;
}

message PlayerLogBodyUnlockHomeBgm {
    uint32 bgm_id = 1;
}

message MistTrialStatLog {
    uint32 stat_id = 1;
    uint32 progress = 2;
}

message MistTrialExhibitionLog {
    uint32 exhibition_id = 1;
    uint32 trigger_type = 2;
    uint32 value = 3;
}

message PlayerLogBodySettleMistTrialDungeon {
    string dungeon_transaction = 1;
    uint32 dungeon_id = 2;
    uint32 mist_trial_level_id = 3;
    repeated AvatarLog trial_avatar_log_list = 4;
    uint32 duration = 5;
    repeated uint32 finished_watcher_list = 6;
    uint32 try_times = 7;
    uint32 dungeon_settle_type = 8;
    repeated MistTrialStatLog stat_log_list = 9;
    repeated MistTrialExhibitionLog exhibition_log_list = 10;
}

message PlayerLogBodyChannellerSlabActivityCampDone {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 stage_id = 3;
    uint32 round_id = 4;
    uint32 camp_index = 5;
    uint32 group_id = 6;
}

message PlayerLogBodyChannellerSlabLoopDungeonChallengeBegin {
    string dungeon_transaction = 1;
    uint32 dungeon_id = 2;
    string challenge_transaction = 3;
    uint32 challenge_id = 4;
    uint32 difficulty_id = 5;
}

message PlayerLogBodyChannellerSlabLoopDungeonChallengeEnd {
    string dungeon_transaction = 1;
    uint32 dungeon_id = 2;
    string challenge_transaction = 3;
    uint32 challenge_id = 4;
    uint32 difficulty_id = 5;
    bool is_mp = 6;
    uint32 total_energy = 7;
    uint32 cost_energy = 8;
    repeated uint32 buff_id_list = 9;
    repeated uint32 condition_id_list = 10;
    uint32 challenge_score = 11;
    uint32 real_challenge_score = 12;
    repeated AvatarLog avatar_list = 13;
    uint32 cost_time = 14;
    bool is_succ = 15;
}

message PlayerLogBodyHideAndSeekInitIdentity {
    string transaction = 1;
    uint32 map_id = 2;
    uint32 identity = 3;
    uint32 play_source = 4;
    repeated uint32 selected_map_list = 5;
}

message PlayerLogBodyHideAndSeekChooseSkill {
    string transaction = 1;
    repeated uint32 skill_list = 2;
}

message PlayerLogBodyHideAndSeekSettle {
    string transaction = 1;
    uint32 identity = 2;
    bool is_win = 3;
    bool is_interrupt = 4;
    uint32 cost_time = 5;
    uint32 score = 6;
    repeated uint32 score_entry_list = 7;
    uint32 actual_score = 8;
}

message PlayerLogBodyHideAndSeekUpdateProgress {
    string transaction = 1;
    uint32 hunter_uid = 2;
    uint32 hider_uid = 3;
    uint32 time = 4;
}

message PlayerLogBodyHideAndSeekPunish {
    string transaction = 1;
    uint32 punish_uid = 2;
    bool is_play_start = 3;
    uint32 punish_time = 4;
}

message PlayerLogBodyHideAndSeekSelectMap {
    repeated uint32 old_map_list = 1;
    repeated uint32 new_map_list = 2;
}

message PlayerLogBodyBounceConjuringStart {
    uint32 chapter_id = 1;
    string transaction = 2;
}

message BounceConjuringCatchGadgetInfo {
    uint32 gadget_id = 1;
    uint32 count = 2;
}

message PlayerLogBodyBounceConjuringSettle {
    uint32 chapter_id = 1;
    string transaction = 2;
    uint32 score = 3;
    uint32 best_score = 4;
    uint32 destroyed_machine_count = 5;
    float damage = 6;
    uint32 normal_hit_count = 7;
    uint32 perfect_hit_count = 8;
    uint32 fever_count = 9;
    repeated BounceConjuringCatchGadgetInfo gadget_info_list = 10;
}

message PlayerLogBodyAvatarGainCostume {
    uint32 fashion_id = 1;
    uint32 avatar_id = 2;
    uint32 quality = 3;
    uint32 reason = 4;
}

message PlayerLogBodyAvatarChangeCostume {
    uint32 fashion_id = 1;
    uint32 avatar_id = 2;
    uint32 quality = 3;
}

message PlayerLogBodyAvatarAutoWearDefaultCostume {
    uint32 costume_id = 1;
    uint32 avatar_id = 2;
    bool is_trial_avatar = 3;
}

message PlayerLogBodyEchoShellInteract {
    uint32 shell_id = 1;
}

message PlayerLogBodySummerTimeSprintBoatBegin {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 group_id = 3;
    string transaction_no = 4;
}

message PlayerLogBodySummerTimeSprintBoatSettle {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 group_id = 3;
    uint32 result_type = 4;
    uint32 settle_points = 5;
    uint32 left_time_sec = 6;
    uint32 gather_num = 7;
    string transaction_no = 8;
}

message GalleryProgressStageInfo {
    uint32 stage_id = 1;
    uint32 time = 2;
}

message PlayerLogBodyGalleryBuoyantCombatStart {
    uint32 gallery_id = 1;
    string transaction = 2;
    uint32 difficulty = 3;
}

message PlayerLogBodyGalleryBuoyantCombatStop {
    uint32 gallery_id = 1;
    string transaction = 2;
    uint32 difficulty = 3;
    uint32 stop_reason = 4;
    uint32 use_time = 5;
    uint32 score = 6;
    uint32 hit_target = 7;
    repeated GalleryProgressStageInfo progress_stage_time_list = 8;
    repeated AvatarLog avatar_list = 9;
}

message PlayerLogBodyProjectorInteract {
    uint32 gadget_id = 1;
    uint32 gadget_state = 2;
}

message PlayerLogBodyHomeTransfer {
    uint32 module_id = 1;
    uint32 target_scene_id = 2;
    uint32 target_block_id = 3;
    uint32 source = 4;
}

message PlayerLogBodyHomeTransferToSafePoint {
    uint32 module_id = 1;
    uint32 target_scene_id = 2;
    uint32 source = 3;
}

message PlayerLogBodyHomePlant {
    uint32 seed_id = 1;
    uint32 furniture_id = 2;
}

message PlayerLogBodyDailyTaskFilterCity {
    uint32 old_city_id = 1;
    uint32 new_city_id = 2;
}

message PlayerLogBodyChessExpChange {
    uint32 add_exp = 1;
    uint32 old_level = 2;
    uint32 old_exp = 3;
    uint32 level = 4;
    uint32 exp = 5;
}

message ChessGearInfo {
    uint32 gear_id = 1;
    uint32 num = 2;
}

message ChessEscapedMonsterInfo {
    uint32 round = 1;
    uint32 escaped_num = 2;
}

message PlayerLogBodyChessDungeonSettle {
    uint32 dungeon_id = 1;
    string transaction = 2;
    uint32 use_time = 3;
    uint32 player_count = 4;
    uint32 dungeon_settle_type = 5;
    uint32 chess_level = 6;
    uint32 add_exp = 7;
    uint32 real_add_exp = 8;
    repeated ChessGearInfo gear_info_list = 9;
    repeated uint32 selected_card_id_list = 10;
    repeated ChessEscapedMonsterInfo escaped_monster_info_list = 11;
    uint32 end_round = 12;
    repeated uint32 pool_id_list = 13;
    uint32 kill_stage_cost_time = 14;
}

message PlayerLogBodyInteractThunderSakuraBough {
    uint32 level = 1;
}

message GalleryFishInfo {
    uint32 fish_id = 1;
    uint32 count = 2;
}

message PlayerLogBodyGalleryFishStart {
    uint32 gallery_id = 1;
    string transaction = 2;
}

message PlayerLogBodyGalleryFishStop {
    uint32 gallery_id = 1;
    string transaction = 2;
    repeated uint32 score_list = 3;
    repeated GalleryFishInfo finish_info_list = 4;
}

message PlayerLogBodyLunaRiteChallenge {
    uint32 area_id = 1;
    uint32 group_bundle_id = 2;
    repeated uint32 group_id_list = 3;
}

message PlayerLogBodyLunaRiteSacrifice {
    uint32 area_id = 1;
    uint32 progress = 2;
}

message SumoAvatarInfo {
    uint32 avatar_id = 1;
    uint32 avatar_level = 2;
    bool is_trial = 3;
}

message SumoTeamInfo {
    repeated SumoAvatarInfo avatar_info_list = 1;
    repeated uint32 buff_id_list = 2;
}

message PlayerLogBodySumoActivityGallerySettle {
    string dungeon_transaction = 1;
    uint32 dungeon_id = 2;
    uint32 difficulty_id = 4;
    uint32 score = 5;
    repeated SumoTeamInfo team_list = 6;
    repeated uint32 kill_normal_monster_list = 7;
    repeated uint32 kill_elite_monster_list = 8;
    repeated uint32 team_score_list = 9;
    uint32 duration = 10;
    bool is_succ = 11;
}

message PlayerLogBodySumoActivitySwitchTeam {
    string dungeon_transaction = 1;
    uint32 team_idx = 2;
}

message PlayerLogBodyFishingCastRod {
    uint32 fish_pool_id = 1;
    uint32 rod_id = 2;
    uint32 bait_id = 3;
}

message PlayerLogBodyFishingQteStart {
    uint32 fish_pool_id = 1;
    string transaction = 2;
    uint32 rod_id = 3;
    uint32 bait_id = 4;
    uint32 fish_id = 5;
}

message PlayerLogBodyFishingQteEnd {
    uint32 fish_pool_id = 1;
    string transaction = 2;
    uint32 rod_id = 3;
    uint32 bait_id = 4;
    uint32 fish_id = 5;
    uint32 result = 6;
}

message PlayerLogBodyHomePlantCancel {
    uint32 seed_id = 1;
    uint32 furniture_id = 2;
    uint32 reason = 3;
}

message PlayerLogBodyDigGalleryStart {
    uint32 group_id = 1;
    uint32 gallery_id = 2;
    string transaction = 3;
    repeated CombatAvatarLog avatar_list = 5;
}

message GroupLuaActionContext {
    string key = 1;
    int32 value = 2;
}

message PlayerLogBodyGroupLuaAction {
    string action_str = 1;
    uint32 group_id = 2;
    string transaction = 3;
    repeated GroupLuaActionContext info_list = 4;
}

message PlayerLogBodyRegionalPlayEnable {
    string transaction = 1;
    string play_name = 2;
    uint32 scene_id = 3;
}

message PlayerLogBodyRegionalPlayDisable {
    string transaction = 1;
    string play_name = 2;
    uint32 scene_id = 3;
}

message PlayerLogBodyLightStoneStateChange {
    enum LightStoneState {
        NONE = 0;
        LIGHT = 1;
        DARK = 2;
    }

    string transaction = 1;
    uint32 state = 2;
    uint32 level = 3;
}

message PlantFlowerItemLog {
    uint32 flower_id = 1;
    uint32 flower_num = 2;
}

message PlayerLogBodyPlantFlowerNumChange {
    enum ChangeReason {
        NONE = 0;
        GIVE = 1;
        ACCEPT = 2;
    }

    uint32 reason = 1;
    uint32 interact_uid = 2;
    repeated PlantFlowerItemLog flower_log = 3;
}

message PlayerLogBodyPlantFlowerSetWish {
    repeated PlantFlowerItemLog flower_log = 1;
}

message PlantFlowerShelfSlotLog {
    string slot_identifier = 1;
    uint32 flower_id = 2;
}

message PlayerLogBodyPlantFlowerCombinationEdit {
    uint32 gadget_config_id = 1;
    uint32 flower_shelf_id = 2;
    repeated PlantFlowerShelfSlotLog slot_log = 3;
}

message PlayerLogBodyCaptureAnimal {
    enum CaptureResultType {
        NONE = 0;
        CAPTURE_SUCC = 1;
        CAPTURE_FAIL = 2;
    }

    uint32 capture_result = 1;
    uint32 monster_id = 2;
    uint32 material_id = 3;
}

message PlayerLogBodyRogueUpgradeShikigami {
    uint32 shikigami_id = 1;
    uint32 old_level = 2;
    uint32 cur_level = 3;
    LogItemParam cost_item = 5;
}

message PlayerLogBodyRogueSelectCard {
    uint32 stage_id = 1;
    string rogue_transaction = 2;
    uint32 level = 3;
    uint32 cell_id = 4;
    bool is_refresh = 5;
    bool is_give_up = 6;
    uint32 card_id = 7;
    uint32 refresh_count = 8;
    bool is_trigger_curse = 9;
}

message PlayerLogBodyRogueTriggerCurse {
    uint32 stage_id = 1;
    string rogue_transaction = 2;
    uint32 level = 3;
    uint32 curse_id = 4;
}

message PlayerLogBodyRogueTriggerRune {
    uint32 stage_id = 1;
    string rogue_transaction = 2;
    uint32 level = 3;
    uint32 rune_id = 4;
    int32 delta_count = 5;
}

message PlayerLogBodyRogueEnterDungeon {
    uint32 stage_id = 1;
    string rogue_transaction = 2;
}

message PlayerLogBodyRogueBattleCellSettle {
    uint32 stage_id = 1;
    string rogue_transaction = 2;
    uint32 level = 3;
    uint32 cell_id = 4;
    uint32 battle_cell_type = 5;
    uint32 time_cost = 6;
    uint32 result = 7;
    repeated AvatarLog onstage_avatar_log_list = 8;
    uint32 monster_pool_id = 9;
}

message PlayerLogBodyRogueSwitchTeam {
    uint32 stage_id = 1;
    string rogue_transaction = 2;
    uint32 level = 3;
    uint32 cell_id = 4;
    repeated AvatarLog switched_to_stage_avatar_log_list = 5;
}

message PlayerLogBodyRogueHeal {
    uint32 stage_id = 1;
    string rogue_transaction = 2;
    uint32 level = 3;
    uint32 cell_id = 4;
}

message RogueAvatarBriefLog {
    uint32 avatar_id = 1;
    uint32 level = 2;
}

message CellTypeNumPair {
    uint32 cell_type = 1;
    uint32 num = 2;
}

message RogueEffectInfo {
    uint32 id = 1;
    uint32 count = 2;
}

message RogueShikigamiInfo {
    uint32 shikigami_id = 1;
    uint32 level = 2;
}

message PlayerLogBodyRogueSettle {
    uint32 stage_id = 1;
    string rogue_transaction = 2;
    bool is_passed = 3;
    uint32 settle_level = 4;
    uint32 settle_cell_id = 5;
    repeated RogueAvatarBriefLog onstage_avatar_brief_log_list = 6;
    repeated RogueAvatarBriefLog backstage_avatar_brief_log_list = 7;
    uint32 total_time_cost = 8;
    bool has_temp_leaved = 9;
    repeated CellTypeNumPair explored_cell_type_list = 10;
    uint32 coin_a_num = 11;
    uint32 coin_b_num = 12;
    uint32 coin_c_num = 13;
    repeated uint32 equipped_rune_list = 14;
    repeated RogueEffectInfo select_card_list = 15;
    repeated RogueEffectInfo trigger_curse_list = 16;
    repeated RogueShikigamiInfo shikigami_list = 17;
}

message PlayerLogBodyRogueTempSave {
    uint32 stage_id = 1;
    string rogue_transaction = 2;
    uint32 cur_level = 3;
    uint32 cur_cell_id = 4;
}

message PlayerLogBodyWinterCampExploreProgress {
    uint32 group_id = 1;
    uint32 cur_progress = 2;
    uint32 total_progress = 3;
}

message PlayerLogBodyWinterCampBattleSettle {
    uint32 group_id = 1;
    uint32 challenge_id = 2;
    string transaction = 3;
}

message PlayerLogBodyWinterCampRaceStart {
    uint32 group_id = 1;
    uint32 gallery_id = 2;
    string transaction = 3;
}

message WinterCampPickUpInfo {
    uint32 type = 1;
    uint32 count = 2;
}

message PlayerLogBodyWinterCampRaceStop {
    uint32 group_id = 1;
    uint32 gallery_id = 2;
    string transaction = 3;
    repeated CombatAvatarLog avatar_list = 4;
    uint32 remain_time = 5;
    uint32 result = 6;
    uint32 score = 7;
    repeated WinterCampPickUpInfo pick_up_list = 8;
}

message PlayerLogBodyGalleryHomeRacingStart {
    uint32 gallery_id = 1;
    string transaction = 2;
    uint32 owner_uid = 3;
}

message PlayerLogBodyGalleryHomeRacingStop {
    uint32 gallery_id = 1;
    string transaction = 2;
    uint32 stop_uid = 3;
    uint32 stop_reason = 4;
}

message PlayerLogBodyTanukiTravelQuestChange {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 day_index = 3;
    uint32 mission_id = 4;
    uint32 quest_id = 5;
    uint32 quest_status = 6;
}

message PlayerLogBodyPotionDungeonChallengeEnd {
    string dungeon_transaction = 1;
    repeated AvatarLog avatar_list = 2;
    uint32 stage_id = 3;
    uint32 dungeon_id = 4;
    uint32 difficulty = 5;
    uint32 ordinal = 6;
    repeated uint32 buff_id_list = 7;
    uint32 use_time = 8;
    bool is_success = 9;
    bool is_saved = 10;
    uint32 score = 11;
    uint32 cumulative_score = 12;
    uint32 challenge_time = 13;
}

message PlayerLogBodyGallerySalvagePreventStop {
    uint32 gallery_id = 1;
    uint32 stop_reason = 2;
    uint32 use_time = 3;
    uint32 score = 4;
    uint32 monster_count = 5;
    repeated CombatAvatarLog avatar_list = 6;
}

message PlayerLogBodyGallerySalvageEscortStop {
    uint32 gallery_id = 1;
    uint32 stop_reason = 2;
    uint32 use_time = 3;
    uint32 score = 4;
    repeated CombatAvatarLog avatar_list = 5;
}

message PlayerLogBodyLanternProjectionFinish {
    uint32 level_id = 1;
    uint32 time = 2;
    bool is_view_tips = 3;
}

message PlayerLogBodyLanternRiteTakeSkinReward {
    uint32 reward_id = 1;
}

message LanternRiteFireworksReformResultInfo {
    uint32 skill_id = 1;
    uint32 factor_id = 2;
    uint32 reform_score = 3;
}

message PlayerLogBodyLanternRiteFireworksReformSettle {
    uint32 challenge_id = 1;
    uint32 remain_stamina_value = 2;
    uint32 final_reform_score = 3;
    repeated LanternRiteFireworksReformResultInfo result_info_list = 4;
}

message PlayerLogBodyCaptureAnimalSkillCdUpdate {
    enum UpdateResultType {
        NONE = 0;
        UPDATE_SUCC = 1;
        UPDATE_FAIL = 2;
    }

    uint32 update_result = 1;
    uint32 material_id = 2;
}

message PlayerLogBodyGalleryHomeStart {
    uint32 gallery_id = 1;
    string transaction = 2;
    uint32 owner_uid = 3;
}

message PlayerLogBodyGalleryHomeStop {
    uint32 gallery_id = 1;
    string transaction = 2;
    uint32 stop_uid = 3;
    uint32 score = 4;
    uint32 stop_reason = 5;
}

message PlayerLogBodyMichiaeMatsuriUnlockCrystalSkill {
    uint32 skill_id = 1;
}

message PlayerLogBodyMichiaeMatsuriRestoreCrystalEnergy {
    float energy_upper_limit = 1;
    float rest_energy = 2;
    float cur_dark_pressure = 3;
}

message PlayerLogBodyBartenderUnlockFormula {
    uint32 formula_id = 1;
    uint32 unlock_type = 2;
}

message PlayerLogBodyBartenderCompleteOrder {
    uint32 play_id = 1;
    uint64 trans_no = 2;
    uint32 formula_id = 3;
    repeated uint32 affix_list = 4;
    uint32 cup_type = 5;
    bool is_finish_aim_order = 6;
    uint32 qte_count = 7;
    bool is_view_formula = 8;
    uint32 retry_count = 9;
    repeated uint32 optional_order_list = 10;
}

message PlayerLogBodyBartenderSettleLevel {
    uint32 play_id = 1;
    uint64 trans_no = 2;
    uint32 time = 3;
    repeated uint32 finish_aim_order_list = 4;
    uint32 output_count = 5;
    uint32 score = 6;
}

message CustomDungeonBrickInfo {
    uint32 brick_id = 1;
    uint32 brick_count = 2;
}

message CustomDungeonDetailInfo {
    uint64 dungeon_guid = 1;
    uint32 dungeon_id = 2;
    repeated CustomDungeonBrickInfo brick_info_list = 3;
    uint32 time_limit = 4;
    uint32 coin_limit = 5;
    bool is_arrive_finish = 6;
    uint32 life_num = 7;
    uint32 version = 8;
}

message PlayerLogBodyCustomDungeonChallengeSettle {
    uint32 play_type = 1;
    uint32 use_time = 2;
    bool is_success = 3;
    CustomDungeonDetailInfo detail_info = 4;
}

message PlayerLogBodyCustomDungeonSave {
    CustomDungeonDetailInfo detail_info = 1;
}

message PlayerLogBodyCustomDungeonPublish {
    CustomDungeonDetailInfo detail_info = 1;
}

message PlayerLogBodyCustomDungeonRemove {
    uint64 dungeon_guid = 1;
    uint32 dungeon_id = 2;
}

message PlayerLogBodyCustomDungeonLike {
    uint64 dungeon_guid = 1;
    uint32 dungeon_id = 2;
    bool is_cancel_like = 3;
}

message PlayerLogBodyCustomDungeonStore {
    uint64 dungeon_guid = 1;
    bool is_cancel_store = 2;
}

message PlayerLogBodyGalleryPhotoStart {
    uint32 gallery_id = 1;
    string transaction = 2;
}

message PlayerLogBodyGalleryPhotoStop {
    uint32 gallery_id = 1;
    string transaction = 2;
    uint32 unpaused_time = 3;
    uint32 photograph_times = 4;
    uint32 end_reason = 5;
    uint32 after_succ_times = 6;
}

message PlayerLogBodySpiceFinishMakeSpice {
    uint32 spice_id = 1;
    repeated uint32 material_id_list = 2;
    bool is_success = 3;
    uint32 left_turns = 4;
    repeated uint32 left_material_id_list = 5;
}

message PlayerLogBodySpiceFinishItemGiving {
    uint32 material_id = 1;
    uint32 avatar_id = 2;
    bool is_exceed_send_limit = 3;
    uint32 add_fetter_value = 4;
    uint32 avatar_feedback = 5;
}

message CrystalLinkBuffInfo {
    uint32 cond_buff_id = 1;
    uint32 effect_buff_id = 2;
}

message CrystalLinkTeamInfo {
    repeated AvatarLog avatar_log_list = 1;
    repeated CrystalLinkBuffInfo buff_info_list = 2;
    uint32 score = 3;
    uint32 kill_normal_monster_num = 4;
    uint32 kill_elite_monster_num = 5;
}

message PlayerLogBodyCrystalLinkDungeonSettle {
    string dungeon_transaction = 1;
    uint32 dungeon_id = 2;
    uint32 level_id = 3;
    uint32 difficulty_id = 4;
    uint32 dungeon_settle_type = 5;
    repeated CrystalLinkTeamInfo team_info_list = 6;
    repeated GalleryProgressStageInfo progress_stage_time_list = 7;
}

message PlayerLogBodyQuickOpenActivity {
    enum State {
        INVALID = 0;
        CONFIRM_QUICK_OPEN = 1;
        FINISH_PRE_QUEST_AFTER_QUICK_OPEN = 2;
    }

    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 state = 3;
}

message PlayerLogBodyIrodoriScanEntity {
    uint32 index_id = 1;
    uint32 theme_id = 2;
    bool is_counted = 3;
}

message PlayerLogBodyIrodoriFillPoetry {
    uint32 theme_id = 1;
    uint32 line_id = 2;
}

message PlayerLogBodyHomeStakeSucc {
    uint32 owner_uid = 1;
}

message IrodoriChessGearInfo {
    uint32 gear_id = 1;
    uint32 num = 2;
}

message IrodoriChessEntranceInfo {
    uint32 entrance_point_id = 1;
    repeated uint32 pool_id_list = 2;
}

message PlayerLogBodyIrodoriChessDungeonSettle {
    uint32 dungeon_id = 1;
    string transaction = 2;
    uint32 settle_score = 3;
    uint32 use_time = 4;
    uint32 kill_stage_cost_time = 5;
    uint32 kill_monster_num = 6;
    repeated uint32 selected_card_id_list = 7;
    repeated IrodoriChessGearInfo gear_info_list = 8;
    repeated IrodoriChessEntranceInfo entrance_info_list = 9;
}

message PlayerLogBodyIrodoriMasterStart {
    uint32 level_id = 1;
    uint32 difficulty = 2;
    uint32 transaction = 3;
}

message PlayerLogBodyIrodoriMasterSettle {
    uint32 level_id = 1;
    uint32 difficulty = 2;
    uint32 transaction = 3;
    uint32 settle_result = 4;
    uint32 time = 5;
}

message PlayerLogBodyGalleryLuminanceStoneGalleryStop {
    uint32 gallery_id = 1;
    string transaction = 2;
    uint32 stop_reason = 3;
    uint32 score = 4;
    uint32 kill_normal_monster_count = 5;
    uint32 kill_elite_monster_count = 6;
    uint32 clean_mud_count = 7;
    repeated AvatarLog avatar_list = 8;
}

message ActivityGiveGiftLog {
    uint32 gift_id = 1;
    uint32 gift_num = 2;
}

message PlayerLogBodyActivityGiveAcceptGift {
    enum ChangeReason {
        NONE = 0;
        GIVE = 1;
        ACCEPT = 2;
    }

    uint32 reason = 1;
    uint32 friend_uid = 2;
    uint32 schedule_id = 3;
    uint32 activity_id = 4;
    repeated ActivityGiveGiftLog gift_list = 5;
}

message PlayerLogBodyGachaActivityStageChange {
    string transaction = 1;
    uint32 cur_stage_id = 2;
    uint32 old_percent = 3;
    uint32 new_percent = 4;
}

message PlayerLogBodyGachaActivityCreateRobot {
    string transaction = 1;
    uint32 robot_id = 2;
}

message PlayerLogBodyMusicGameStart {
    uint32 music_id = 1;
    uint32 level_id = 2;
    uint32 avatar_id = 3;
    uint64 trans_no = 4;
    uint32 game_type = 5;
    uint64 share_code = 6;
    uint32 version_num = 7;
}

message PlayerLogBodyMusicGameStopV2 {
    uint32 music_id = 1;
    uint32 level_id = 2;
    uint64 trans_no = 3;
    uint32 game_type = 4;
    uint64 share_code = 5;
    uint32 version_num = 6;
    uint32 restart_times = 7;
    uint32 score = 8;
    uint32 score_rating = 9;
    uint32 star_rating = 10;
    repeated uint32 note_list = 11;
    uint32 max_combo = 12;
    uint32 is_full_combo = 13;
    repeated uint32 button_list = 14;
    uint32 volume = 15;
    bool is_custom_delay = 16;
    uint32 delay = 17;
    bool is_custom_speed = 18;
    float speed = 19;
}

message PlayerLogBodyMusicGameSaveUgc {
    uint32 save_page_type = 1;
    uint32 version_num = 2;
    repeated uint32 before_note_list = 3;
    repeated uint32 after_note_list = 4;
    uint32 real_time_edit_time = 5;
    uint32 time_line_edit_time = 6;
}

message PlayerLogBodyMusicGamePublishUgc {
    uint32 version_num = 1;
    uint64 share_code = 2;
    bool is_original = 3;
    uint32 import_from_uid = 4;
}

message PlayerLogBodyNicknameAuditResult {
    bool is_audit_pass = 1;
    string nickname_before = 2;
    string nickname_after = 3;
    uint32 left_submit_count = 4;
    bool is_audit_open = 5;
    bool is_not_waiting = 6;
    bool is_not_consistent = 7;
}

message PlayerLogBodySignatureAuditResult {
    bool is_audit_pass = 1;
    string sign_before = 2;
    string sign_after = 3;
    uint32 left_submit_count = 4;
    bool is_audit_open = 5;
    bool is_not_waiting = 6;
    bool is_not_consistent = 7;
}

message RogueDiaryAvatarLog {
    uint32 id = 1;
    bool is_trial = 2;
}

message PlayerLogBodyRogueDiaryRoundStart {
    uint32 stage_id = 1;
    uint32 dungeon_id = 2;
    uint32 transaction = 3;
    uint32 round = 4;
    repeated RogueDiaryAvatarLog onstage_avatar_list = 5;
    repeated uint32 buff_list = 6;
}

message PlayerLogBodyRogueDiarySave {
    uint32 stage_id = 1;
    uint32 dungeon_id = 2;
    uint32 transaction = 3;
    uint32 round = 4;
    bool is_round_fight_finished = 5;
    bool is_round_repair_finished = 6;
    uint32 cost_time = 7;
}

message PlayerLogBodyRogueDiaryRoomSettle {
    uint32 stage_id = 1;
    uint32 dungeon_id = 2;
    uint32 transaction = 3;
    uint32 round = 4;
    uint32 room = 5;
    bool is_can_hard = 6;
    bool is_select_hard = 7;
    uint32 monster_pool_id = 8;
    bool is_boss_room = 9;
    uint32 room_cost_time = 10;
    uint32 result = 11;
}

message PlayerLogBodyRogueDiarySettle {
    uint32 stage_id = 1;
    uint32 dungeon_id = 2;
    uint32 transaction = 3;
    uint32 round = 4;
    bool is_round_fight_finished = 5;
    bool is_round_repair_finished = 6;
    uint32 cost_time = 7;
    bool is_finish = 8;
}

message PlayerLogBodyRogueDiaryDungeonLoad {
    uint32 stage_id = 1;
    uint32 dungeon_id = 2;
    uint32 transaction = 3;
    uint32 round = 4;
    bool is_round_fight_finished = 5;
    bool is_round_repair_finished = 6;
}

message PlayerLogBodyRogueDiaryCoinChange {
    uint32 stage_id = 1;
    uint32 dungeon_id = 2;
    uint32 transaction = 3;
    uint32 round = 4;
    uint32 coin_change_reason = 5;
    uint32 coin_change_num = 6;
    uint32 coin_num = 7;
    repeated uint32 buy_card_list = 8;
}

message GearColumnInfo {
    uint32 gear_column_index = 1;
    bool has_gear = 2;
    uint32 gear_id = 3;
    uint32 placement_layer = 4;
    bool is_overturn = 5;
}

message PlayerLogBodyGearFinishPlayGear {
    uint32 stage_id = 1;
    uint32 use_time = 2;
    bool result = 3;
    bool use_clue = 4;
    repeated GearColumnInfo gear_column_info_list = 5;
}

message PlayerLogBodyGearFinishJigsaw {
    uint32 use_time = 1;
    bool result = 2;
}

message PlayerLogBodySummerTimeV2BoatGalleryStart {
    uint32 gallery_id = 1;
    string transaction = 2;
}

message PlayerLogBodySummerTimeV2BoatGalleryStop {
    uint32 gallery_id = 1;
    string transaction = 2;
    uint32 result_type = 3;
    uint32 used_time = 4;
    uint32 param1 = 5;
    uint32 param2 = 6;
    uint32 param3 = 7;
}

message PlayerLogBodyMountainInteractChangeLevelTag {
    uint32 target_level_tag_id = 1;
}

message PlayerLogBodyIslandPartyStart {
    uint32 level_id = 1;
    string transaction = 2;
    uint32 start_source = 3;
}

message PlayerLogBodyIslandPartySettle {
    uint32 level_id = 1;
    string transaction = 2;
    uint32 stop_reason = 3;
    uint32 use_time = 4;
    uint32 left_time = 5;
    uint32 score = 6;
    repeated uint32 score_entry_list = 7;
    repeated uint32 card_entry_list = 8;
}

message PlayerLogBodyAvatarExtraPropChange {
    uint32 avatar_id = 1;
    uint32 extra_prop_id = 2;
    uint32 old_extra_prop_count = 3;
    uint32 new_extra_prop_count = 4;
    uint32 reason = 5;
}

message PlayerLogBodyMuqadasGallerySettle {
    uint32 level_id = 1;
    uint32 dungeon_id = 2;
    uint32 score = 3;
    uint32 actual_use_time = 4;
    repeated AvatarLog avatar_list = 5;
    uint32 pause_times = 6;
    uint32 capture_weakness_count = 7;
    uint32 once_max_weakness_count = 8;
}

message PlayerLogBodyInstableSprayGallerySettle {
    string transaction = 1;
    repeated AvatarLog avatar_list = 2;
    uint32 gallery_id = 3;
    uint32 dungeon_id = 4;
    uint32 difficulty = 5;
    bool is_success = 6;
    uint32 draw_times = 7;
    uint32 draw_interval_time = 8;
    uint32 score = 9;
}

message PlayerLogBodyInstableSprayDungeonSettle {
    string transaction = 1;
    uint32 dungeon_id = 2;
    bool is_success = 3;
    uint32 gallery1_score = 4;
    uint32 gallery2_score = 5;
    uint32 gallery3_score = 6;
    uint32 total_score = 7;
}

message PlayerLogBodyGravenInnocencePhotoFinish {
    uint32 object_id = 1;
    uint32 stage_id = 2;
}

message PlayerLogBodyGravenInnocenceRaceStart {
    uint32 level_id = 1;
    uint32 group_id = 2;
    string transaction = 3;
}

message PlayerLogBodyGravenInnocenceRaceSettle {
    uint32 level_id = 1;
    uint32 group_id = 2;
    string transaction = 3;
    uint32 cost_time = 4;
    uint32 coin_count = 5;
    uint32 result = 6;
    uint32 time_score = 7;
    uint32 coin_score = 8;
}

message PlayerLogBodyEnterDeathZone {
    string transaction = 1;
    uint32 death_zone_id = 2;
    float base_erosion_value = 3;
    float extra_erosion_value = 4;
}

message PlayerLogBodyDestroyDeathZone {
    string transaction = 1;
    uint32 death_zone_id = 2;
    float base_erosion_value = 3;
    float best_extra_erosion_value = 4;
}

message PlayerLogBodyFinishDeathZone {
    string transaction = 1;
    uint32 death_zone_id = 2;
    float base_erosion_value = 3;
    float best_extra_erosion_value = 4;
}

message PlayerLogBodyCompoundBoost {
    uint32 use_material = 1;
    uint32 use_num = 2;
    uint32 reduce_time = 3;
    repeated uint32 obtain_material = 4;
    repeated uint32 obtain_num = 5;
}

message PlayerLogBodyVintageHuntingStageOneSettle {
    uint32 stage_id = 1;
    uint32 result = 2;
    uint32 use_time = 3;
    uint32 score = 4;
    uint32 capture_timid_count = 5;
    uint32 capture_brutal_count = 6;
    uint32 capture_elite_count = 7;
}

message HuntingAnimalLog {
    uint32 monster_id = 1;
    uint32 num = 2;
}

message PlayerLogBodyVintageHuntingStageTwoSettle {
    uint32 stage_id = 1;
    uint32 result = 2;
    uint32 use_time = 3;
    uint32 capture_num = 4;
    repeated HuntingAnimalLog capture_vec = 5;
    repeated HuntingAnimalLog capture_no_battle_vec = 6;
}

message PlayerLogBodyVintageHuntingStageThreeSettle {
    uint32 stage_id = 1;
    uint32 result = 2;
    uint32 use_time = 3;
    uint32 boss_weak_times = 4;
}

message PlayerLogBodyVintageMarketCoinChange {
    uint32 shop_count = 1;
    uint32 coin_id = 2;
    uint32 reason = 3;
    int32 change_num = 4;
    uint32 cur_num = 5;
}

message VintageMarketStoreRoundLog {
    uint32 id = 1;
    uint32 income = 2;
    repeated uint32 add_attr_list = 3;
    repeated uint32 strategy_list = 4;
    uint32 help_uid = 5;
    uint32 help_skill_id = 6;
}

message PlayerLogBodyVintageMarketStoreRoundSettle {
    uint32 round = 1;
    uint32 shop_count = 2;
    bool is_finish_store_content = 3;
    uint32 total_income = 4;
    uint32 round_income = 5;
    repeated VintageMarketStoreRoundLog store_list = 6;
}

message PlayerLogBodyVintageMarketNpcEventFinish {
    uint32 round = 1;
    uint32 shop_count = 2;
    uint32 npc_event_id = 3;
    uint32 reward_id = 4;
}

message PlayerLogBodyVintageMarketStrategySlotUnlock {
    uint32 round = 1;
    uint32 shop_id = 2;
    uint32 slot_count = 3;
}

message PlayerLogBodySetBirthday {
    string birthday_set = 1;
}

message PlayerLogBodyWindFieldGalleryStart {
    uint32 gallery_id = 1;
    string transaction = 2;
    repeated AvatarLog avatar_list = 3;
}

message PlayerLogBodyWindFieldGalleryStop {
    uint32 gallery_id = 1;
    string transaction = 2;
    uint32 used_time = 3;
    uint32 reason = 4;
    uint32 windball_num = 5;
    uint32 coin_num = 6;
    uint32 kill_monster_count = 7;
}

message PlayerLogBodySetGadgetChainLevel {
    uint32 gadget_chain_id = 1;
    uint32 level = 2;
}

message PlayerLogBodyDeshretObeliskInteract {
    uint32 group_id = 1;
    uint32 config_id = 2;
}

message PlayerLogBodyEffigyChallengeV2EnterDungeon {
    string transaction_no = 1;
    uint32 dungeon_id = 2;
    uint32 difficulty_id = 3;
    repeated CombatAvatarLog avatar_list = 4;
    bool is_mp = 5;
}

message EffigyChallengeV2GallerySettleInfoLog {
    uint32 gallery_id = 1;
    uint32 result = 2;
    uint32 skill_used_cnt = 3;
    uint32 duration = 4;
}

message PlayerLogBodyEffigyChallengeV2DungeonSettle {
    string transaction_no = 1;
    uint32 dungeon_id = 2;
    uint32 difficulty_id = 3;
    uint32 result = 4;
    uint32 selected_skill = 5;
    repeated EffigyChallengeV2GallerySettleInfoLog gallery_settle_info_list = 6;
}

message PlayerLogBodyEffigyChallengeV2GalleryStop {
    string transaction_no = 1;
    uint32 gallery_id = 2;
    uint32 result = 3;
    uint32 skill_used_cnt = 4;
    uint32 duration = 5;
}

message PlayerLogBodyHomeCreateBlueprint {
    uint32 slot_id = 1;
    string share_code = 2;
    uint32 module_id = 3;
    uint32 scene_id = 4;
    uint32 block_id = 5;
    FurnitureArrangementLog furniture_arrangement_log = 6;
    uint32 home_owner_uid = 7;
    bool is_home_allow_copy = 8;
}

message HomeBlueprintShareCodeLog {
    string share_code = 1;
    uint32 share_owner_uid = 2;
}

message PlayerLogBodyHomeUseBlueprint {
    repeated HomeBlueprintShareCodeLog share_code_log_list = 1;
    uint32 module_id = 2;
    uint32 scene_id = 3;
}

message PlayerLogBodyHomeDeleteBlueprint {
    enum DeleteReason {
        NONE = 0;
        SELF_OP = 1;
        INVALID = 2;
    }

    uint32 slot_id = 1;
    string share_code = 2;
    uint32 delete_reason = 3;
}

message PlayerLogBodyHomeSetAllowCopy {
    bool is_home_allow_copy = 1;
}

message PlayerLogBodyHomeBlueprintSetAllowCopy {
    uint32 slot_id = 1;
    string share_code = 2;
    bool is_allow_copy = 3;
}

message PlayerLogBodyCharAmusementGalleryStart {
    string transaction = 1;
    repeated uint32 avatar_id_list = 2;
    uint32 gallery_id = 3;
    uint32 dungeon_id = 4;
    uint32 multiplayer_status = 5;
    uint32 multiplayer_num = 6;
}

message PlayerLogBodyCharAmusementGalleryEnd {
    string transaction = 1;
    repeated uint32 avatar_id_list = 2;
    uint32 gallery_id = 3;
    uint32 dungeon_id = 4;
    uint32 multiplayer_status = 5;
    uint32 multiplayer_num = 6;
    uint32 is_success = 7;
    uint32 death_times = 8;
    uint32 time_used = 9;
    uint32 score = 10;
}

message PlayerLogBodyCharAmusementDungeonStart {
    string transaction = 1;
    uint32 dungeon_id = 2;
    uint32 multiplayer_status = 3;
    uint32 multiplayer_num = 4;
}

message PlayerLogBodyCharAmusementDungeonEnd {
    string transaction = 1;
    uint32 dungeon_id = 2;
    uint32 is_success = 3;
    uint32 multiplayer_status = 4;
    uint32 multiplayer_num = 5;
    uint32 gallery1_time = 6;
    uint32 gallery2_time = 7;
    uint32 gallery3_time = 8;
    uint32 total_time = 9;
}

message PlayerLogBodyFungusCaptureSettle {
}

message FungusStateLog {
    uint32 fungus_id = 1;
    float hp = 2;
}

message FungusDungeonBasicLog {
    uint32 dungeon_id = 1;
    repeated FungusStateLog fungus_choosen_list = 2;
    repeated FungusStateLog fungus_backup_list = 3;
    uint32 skill_count = 4;
}

message PlayerLogBodyFungusAttackDungeonStart {
    FungusDungeonBasicLog basic_info = 1;
    uint32 room_id = 2;
    string level_transaction = 3;
    string room_transaction = 4;
    repeated uint32 fungus_dead_list = 5;
}

message PlayerLogBodyFungusAttackDungeonSettle {
    FungusDungeonBasicLog basic_info = 1;
    uint32 room_id = 2;
    string level_transaction = 3;
    string room_transaction = 4;
    uint32 resource_id = 5;
    repeated uint32 fungus_dead_list = 6;
    uint32 settle_result = 7;
    uint32 time = 8;
    uint32 score = 9;
}

message PlayerLogBodyFungusDefendDungeonStart {
    FungusDungeonBasicLog basic_info = 1;
    string transaction = 2;
}

message PlayerLogBodyFungusDefendDungeonSettle {
    FungusDungeonBasicLog basic_info = 1;
    string transaction = 2;
    uint32 resource_id = 3;
    repeated uint32 fungus_dead_list = 4;
    uint32 settle_result = 6;
    uint32 time = 7;
    uint32 gadget_life_percent = 8;
    uint32 score = 9;
}

message PlayerLogBodyFungusDungeonChange {
    FungusDungeonBasicLog basic_info = 1;
    uint32 room_id = 2;
    string level_transaction = 3;
    string room_transaction = 4;
    repeated uint32 fungus_used = 5;
}

message PlayerLogBodyFungusCultivateSettle {
    uint32 cultivate_id = 1;
    uint32 cultivate_step = 2;
    uint32 time = 3;
    repeated uint32 step_cnt = 4;
    repeated uint32 limit_cnt = 5;
}

message PlayerLogBodyGcgMatchScoreChange {
    enum GcgMatchScoreChangeReason {
        NONE = 0;
        INIT = 1;
        MATCH_SETTLE = 2;
        VERSION_RESET = 3;
    }

    uint32 match_id = 1;
    uint32 before_score = 2;
    uint32 after_score = 3;
    uint32 reason = 4;
}

message PlayerLogBodyGcgAddExp {
    bool is_level_up = 1;
    uint32 add_exp = 2;
    uint32 before_level = 3;
    uint32 after_level = 4;
    uint32 before_exp = 5;
    uint32 after_exp = 6;
    uint32 reason = 7;
}

message PlayerLogBodyGcgAddCard {
    uint32 card_id = 1;
    uint32 add_count = 2;
    uint32 before_count = 3;
    uint32 after_count = 4;
}

message PlayerLogBodyGcgUnlockCardFace {
    uint32 card_id = 1;
    uint32 face_type = 2;
}

message PlayerLogBodyGcgUnlockCardBack {
    uint32 card_back_id = 1;
}

message PlayerLogBodyGcgUnlockField {
    uint32 field_id = 1;
}

message PlayerLogBodyGcgSaveDeck {
    uint32 deck_id = 1;
    string deck_name = 2;
    repeated uint32 character_card_list = 3;
    repeated uint32 card_list = 4;
}

message PlayerLogBodyGcgSetCardBack {
    uint32 deck_id = 1;
    uint32 card_back_id = 2;
}

message PlayerLogBodyGcgSetField {
    uint32 deck_id = 1;
    uint32 field_id = 2;
}

message PlayerLogBodyGcgFinishLevelChallenge {
    uint32 level_id = 1;
    uint32 real_level_id = 2;
    repeated uint32 challenge_id_list = 3;
}

message PlayerLogBodyGcgFinishWeekChallenge {
    uint32 npc_id = 1;
    uint32 level_id = 2;
    uint32 total_npc_count = 3;
    uint32 finish_npc_count = 4;
    uint32 refresh_time = 5;
}

message PlayerLogBodyGcgInviteApply {
    uint32 uid = 1;
}

message PlayerLogBodyGcgDeleteCard {
    uint32 card_id = 1;
    uint32 del_num = 2;
}

message PlayerLogBodyGcgDeleteCardFace {
    uint32 card_face_id = 1;
}

message PlayerLogBodyGcgDeleteCardBack {
    uint32 card_back_id = 1;
}

message PlayerLogBodyGcgDeleteDeckField {
    uint32 deck_field_id = 1;
}

message PlayerLogBodyGcgBanMatch {
    uint32 old_expire_time = 1;
    uint32 new_expire_time = 2;
}

message PlayerLogBodyGcgBanPvp {
    uint32 old_expire_time = 1;
    uint32 new_expire_time = 2;
}

message PlayerLogBodyGcgSetMatchScore {
    uint32 match_id = 1;
    uint32 old_score = 2;
    uint32 new_score = 3;
}

message CoinCollectPlayerLogTeamInfo {
    uint32 player_uid = 1;
    repeated uint32 avatar_id_list = 2;
    uint32 skill_no = 3;
}

message PlayerLogBodyCoinCollectGalleryStart {
    uint32 level_id = 1;
    string transaction_no = 2;
    uint32 team_mode = 3;
    repeated CoinCollectPlayerLogTeamInfo player_info_list = 4;
}

message PlayerLogBodyCoinCollectGallerySettle {
    uint32 level_id = 1;
    string transaction_no = 2;
    uint32 stop_reason = 3;
    uint32 team_mode = 4;
    repeated CoinCollectPlayerLogTeamInfo player_info_list = 5;
    uint32 coin_collect_num = 6;
    uint32 coin_collect_time = 7;
}

message PlayerLogBodyBrickBreakerGalleryStart {
    uint32 dungeon_id = 1;
    uint32 level_id = 2;
    string transaction = 3;
}

message BrickBreakerGalleryPlayerInfoLog {
    uint32 uid = 1;
    repeated uint32 avatar_id_list = 2;
    repeated uint32 skill_id_list = 3;
    bool is_not_select_avatar = 4;
}

message BrickBreakerElementReactionCounterLog {
    uint32 element_reaction = 1;
    uint32 count = 2;
}

message PlayerLogBodyBrickBreakerGalleryEnd {
    uint32 dungeon_id = 1;
    uint32 level_id = 2;
    string transaction = 3;
    uint32 mp_mode = 4;
    repeated BrickBreakerGalleryPlayerInfoLog uid_info_list = 5;
    uint32 result_type = 6;
    uint32 use_time = 7;
    uint32 result_score = 8;
    uint32 max_combo = 9;
    uint32 life_count = 10;
    uint32 player_num = 11;
    uint32 remaining_boss_hp = 12;
    repeated BrickBreakerElementReactionCounterLog brick_element_reaction_list = 13;
    repeated BrickBreakerElementReactionCounterLog ball_element_reaction_list = 14;
    repeated uint32 score_list = 15;
    repeated uint32 remaining_boss_hp_list = 16;
}

message PlayerLogBodyQuestAvatarRename {
    uint32 avatar_id = 1;
    bool is_own = 2;
    string after_name = 3;
}

message PlayerLogBodyItemAvatarRename {
    uint32 avatar_id = 1;
    bool is_own = 2;
    string before_name = 3;
    string audit_name = 4;
    bool result = 5;
}

message PlayerLogBodyResetAvatarRename {
    uint32 avatar_id = 1;
    bool is_own = 2;
    string before_name = 3;
    uint32 reason = 4;
}
